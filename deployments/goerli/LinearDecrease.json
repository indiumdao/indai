{
  "address": "0x558Fe06c949F0B2c712bf9B34eF6Bf86A6406531",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "Deny",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "File",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "Rely",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "deny",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "file",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "top",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dur",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "rely",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tau",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "wards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d9852fa73308e3f0fdeab7b3c38ba62b47f8c5532875b67dd8b30cabbd642e4",
  "receipt": {
    "to": null,
    "from": "0x76677d82Cba9d7F2BB40670456AbaD808778635c",
    "contractAddress": "0x558Fe06c949F0B2c712bf9B34eF6Bf86A6406531",
    "transactionIndex": 23,
    "gasUsed": "467454",
    "logsBloom": "0x00000000000000000000000000000020000000000100000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000020000000",
    "blockHash": "0x70d7dae0f4a5e3cfeebd612b9a772bb67fefbf6e483a74ae81d227c2b1930748",
    "transactionHash": "0x8d9852fa73308e3f0fdeab7b3c38ba62b47f8c5532875b67dd8b30cabbd642e4",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 8343411,
        "transactionHash": "0x8d9852fa73308e3f0fdeab7b3c38ba62b47f8c5532875b67dd8b30cabbd642e4",
        "address": "0x558Fe06c949F0B2c712bf9B34eF6Bf86A6406531",
        "topics": [
          "0xdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a60",
          "0x00000000000000000000000076677d82cba9d7f2bb40670456abad808778635c"
        ],
        "data": "0x",
        "logIndex": 67,
        "blockHash": "0x70d7dae0f4a5e3cfeebd612b9a772bb67fefbf6e483a74ae81d227c2b1930748"
      }
    ],
    "blockNumber": 8343411,
    "cumulativeGasUsed": "4031395",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ed048294ed74b7abd11bdebd540fd1ff",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"top\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dur\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tau\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/abaci.sol\":\"LinearDecrease\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/abaci.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// abaci.sol -- price decrease functions for auctions\\n\\n// Copyright (C) 2020-2022 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published\\n// by the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.6.12;\\n\\ninterface Abacus {\\n    // 1st arg: initial price               [ray]\\n    // 2nd arg: seconds since auction start [seconds]\\n    // returns: current auction price       [ray]\\n    function price(uint256, uint256) external view returns (uint256);\\n}\\n\\ncontract LinearDecrease is Abacus {\\n\\n    // --- Auth ---\\n    mapping (address => uint256) public wards;\\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\\n    modifier auth {\\n        require(wards[msg.sender] == 1, \\\"LinearDecrease/not-authorized\\\");\\n        _;\\n    }\\n\\n    // --- Data ---\\n    uint256 public tau;  // Seconds after auction start when the price reaches zero [seconds]\\n\\n    // --- Events ---\\n    event Rely(address indexed usr);\\n    event Deny(address indexed usr);\\n\\n    event File(bytes32 indexed what, uint256 data);\\n\\n    // --- Init ---\\n    constructor() public {\\n        wards[msg.sender] = 1;\\n        emit Rely(msg.sender);\\n    }\\n\\n    // --- Administration ---\\n    function file(bytes32 what, uint256 data) external auth {\\n        if (what ==  \\\"tau\\\") tau = data;\\n        else revert(\\\"LinearDecrease/file-unrecognized-param\\\");\\n        emit File(what, data);\\n    }\\n\\n    // --- Math ---\\n    uint256 constant RAY = 10 ** 27;\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x);\\n        z = z / RAY;\\n    }\\n\\n    // Price calculation when price is decreased linearly in proportion to time:\\n    // tau: The number of seconds after the start of the auction where the price will hit 0\\n    // top: Initial price\\n    // dur: current seconds since the start of the auction\\n    //\\n    // Returns y = top * ((tau - dur) / tau)\\n    //\\n    // Note the internal call to mul multiples by RAY, thereby ensuring that the rmul calculation\\n    // which utilizes top and tau (RAY values) is also a RAY value.\\n    function price(uint256 top, uint256 dur) override external view returns (uint256) {\\n        if (dur >= tau) return 0;\\n        return rmul(top, mul(tau - dur, RAY) / tau);\\n    }\\n}\\n\\ncontract StairstepExponentialDecrease is Abacus {\\n\\n    // --- Auth ---\\n    mapping (address => uint256) public wards;\\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\\n    modifier auth {\\n        require(wards[msg.sender] == 1, \\\"StairstepExponentialDecrease/not-authorized\\\");\\n        _;\\n    }\\n\\n    // --- Data ---\\n    uint256 public step; // Length of time between price drops [seconds]\\n    uint256 public cut;  // Per-step multiplicative factor     [ray]\\n\\n    // --- Events ---\\n    event Rely(address indexed usr);\\n    event Deny(address indexed usr);\\n\\n    event File(bytes32 indexed what, uint256 data);\\n\\n    // --- Init ---\\n    // @notice: `cut` and `step` values must be correctly set for\\n    //     this contract to return a valid price\\n    constructor() public {\\n        wards[msg.sender] = 1;\\n        emit Rely(msg.sender);\\n    }\\n\\n    // --- Administration ---\\n    function file(bytes32 what, uint256 data) external auth {\\n        if      (what ==  \\\"cut\\\") require((cut = data) <= RAY, \\\"StairstepExponentialDecrease/cut-gt-RAY\\\");\\n        else if (what == \\\"step\\\") step = data;\\n        else revert(\\\"StairstepExponentialDecrease/file-unrecognized-param\\\");\\n        emit File(what, data);\\n    }\\n\\n    // --- Math ---\\n    uint256 constant RAY = 10 ** 27;\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x);\\n        z = z / RAY;\\n    }\\n    // optimized version from dss PR #78\\n    function rpow(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\\n        assembly {\\n            switch n case 0 { z := b }\\n            default {\\n                switch x case 0 { z := 0 }\\n                default {\\n                    switch mod(n, 2) case 0 { z := b } default { z := x }\\n                    let half := div(b, 2)  // for rounding.\\n                    for { n := div(n, 2) } n { n := div(n,2) } {\\n                        let xx := mul(x, x)\\n                        if shr(128, x) { revert(0,0) }\\n                        let xxRound := add(xx, half)\\n                        if lt(xxRound, xx) { revert(0,0) }\\n                        x := div(xxRound, b)\\n                        if mod(n,2) {\\n                            let zx := mul(z, x)\\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\\n                            let zxRound := add(zx, half)\\n                            if lt(zxRound, zx) { revert(0,0) }\\n                            z := div(zxRound, b)\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    // top: initial price\\n    // dur: seconds since the auction has started\\n    // step: seconds between a price drop\\n    // cut: cut encodes the percentage to decrease per step.\\n    //   For efficiency, the values is set as (1 - (% value / 100)) * RAY\\n    //   So, for a 1% decrease per step, cut would be (1 - 0.01) * RAY\\n    //\\n    // returns: top * (cut ^ dur)\\n    //\\n    //\\n    function price(uint256 top, uint256 dur) override external view returns (uint256) {\\n        return rmul(top, rpow(cut, dur / step, RAY));\\n    }\\n}\\n\\n// While an equivalent function can be obtained by setting step = 1 in StairstepExponentialDecrease,\\n// this continous (i.e. per-second) exponential decrease has be implemented as it is more gas-efficient\\n// than using the stairstep version with step = 1 (primarily due to 1 fewer SLOAD per price calculation).\\ncontract ExponentialDecrease is Abacus {\\n\\n    // --- Auth ---\\n    mapping (address => uint256) public wards;\\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\\n    modifier auth {\\n        require(wards[msg.sender] == 1, \\\"ExponentialDecrease/not-authorized\\\");\\n        _;\\n    }\\n\\n    // --- Data ---\\n    uint256 public cut;  // Per-second multiplicative factor [ray]\\n\\n    // --- Events ---\\n    event Rely(address indexed usr);\\n    event Deny(address indexed usr);\\n\\n    event File(bytes32 indexed what, uint256 data);\\n\\n    // --- Init ---\\n    // @notice: `cut` value must be correctly set for\\n    //     this contract to return a valid price\\n    constructor() public {\\n        wards[msg.sender] = 1;\\n        emit Rely(msg.sender);\\n    }\\n\\n    // --- Administration ---\\n    function file(bytes32 what, uint256 data) external auth {\\n        if      (what ==  \\\"cut\\\") require((cut = data) <= RAY, \\\"ExponentialDecrease/cut-gt-RAY\\\");\\n        else revert(\\\"ExponentialDecrease/file-unrecognized-param\\\");\\n        emit File(what, data);\\n    }\\n\\n    // --- Math ---\\n    uint256 constant RAY = 10 ** 27;\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x);\\n        z = z / RAY;\\n    }\\n    // optimized version from dss PR #78\\n    function rpow(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\\n        assembly {\\n            switch n case 0 { z := b }\\n            default {\\n                switch x case 0 { z := 0 }\\n                default {\\n                    switch mod(n, 2) case 0 { z := b } default { z := x }\\n                    let half := div(b, 2)  // for rounding.\\n                    for { n := div(n, 2) } n { n := div(n,2) } {\\n                        let xx := mul(x, x)\\n                        if shr(128, x) { revert(0,0) }\\n                        let xxRound := add(xx, half)\\n                        if lt(xxRound, xx) { revert(0,0) }\\n                        x := div(xxRound, b)\\n                        if mod(n,2) {\\n                            let zx := mul(z, x)\\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\\n                            let zxRound := add(zx, half)\\n                            if lt(zxRound, zx) { revert(0,0) }\\n                            z := div(zxRound, b)\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    // top: initial price\\n    // dur: seconds since the auction has started\\n    // cut: cut encodes the percentage to decrease per second.\\n    //   For efficiency, the values is set as (1 - (% value / 100)) * RAY\\n    //   So, for a 1% decrease per second, cut would be (1 - 0.01) * RAY\\n    //\\n    // returns: top * (cut ^ dur)\\n    //\\n    function price(uint256 top, uint256 dur) override external view returns (uint256) {\\n        return rmul(top, rpow(cut, dur, RAY));\\n    }\\n}\\n\",\"keccak256\":\"0xc115e4d36fc94bcf92474a560a9e38ae1d7f9985751dbf37b183f418b9e82db3\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6060405160405180910390a2610710806100a76000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806329ae811414610067578063487a23951461009f57806365fae35e146100eb5780639c52a7f11461012f578063bf353dbb14610173578063cfc4af55146101cb575b600080fd5b61009d6004803603604081101561007d57600080fd5b8101908080359060200190929190803590602001909291905050506101e9565b005b6100d5600480360360408110156100b557600080fd5b81019080803590602001909291908035906020019092919050505061035e565b6040518082815260200191505060405180910390f35b61012d6004803603602081101561010157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103a9565b005b6101716004803603602081101561014557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104e7565b005b6101b56004803603602081101561018957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610625565b6040518082815260200191505060405180910390f35b6101d361063d565b6040518082815260200191505060405180910390f35b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461029d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4c696e65617244656372656173652f6e6f742d617574686f72697a656400000081525060200191505060405180910390fd5b7f74617500000000000000000000000000000000000000000000000000000000008214156102d15780600181905550610322565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806106b56026913960400191505060405180910390fd5b817fe986e40cc8c151830d4f61050f4fb2e4add8567caad2d5f5496f9158e91fe4c7826040518082815260200191505060405180910390a25050565b6000600154821061037257600090506103a3565b6103a08360015461039385600154036b033b2e3c9fd0803ce8000000610643565b8161039a57fe5b0461066f565b90505b92915050565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461045d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4c696e65617244656372656173652f6e6f742d617574686f72697a656400000081525060200191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6060405160405180910390a250565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461059b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4c696e65617244656372656173652f6e6f742d617574686f72697a656400000081525060200191505060405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167f184450df2e323acec0ed3b5c7531b81f9b4cdef7914dfd4c0a4317416bb5251b60405160405180910390a250565b60006020528060005260406000206000915090505481565b60015481565b600080821480610660575082828385029250828161065d57fe5b04145b61066957600080fd5b92915050565b60008183029050600082148061068d57508282828161068a57fe5b04145b61069657600080fd5b6b033b2e3c9fd0803ce800000081816106ab57fe5b0490509291505056fe4c696e65617244656372656173652f66696c652d756e7265636f676e697a65642d706172616da26469706673582212209e8b94de2c914fa9fa6ccd50f86b8f08685922ae3441d6726773ca854dc7d06164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806329ae811414610067578063487a23951461009f57806365fae35e146100eb5780639c52a7f11461012f578063bf353dbb14610173578063cfc4af55146101cb575b600080fd5b61009d6004803603604081101561007d57600080fd5b8101908080359060200190929190803590602001909291905050506101e9565b005b6100d5600480360360408110156100b557600080fd5b81019080803590602001909291908035906020019092919050505061035e565b6040518082815260200191505060405180910390f35b61012d6004803603602081101561010157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103a9565b005b6101716004803603602081101561014557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104e7565b005b6101b56004803603602081101561018957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610625565b6040518082815260200191505060405180910390f35b6101d361063d565b6040518082815260200191505060405180910390f35b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461029d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4c696e65617244656372656173652f6e6f742d617574686f72697a656400000081525060200191505060405180910390fd5b7f74617500000000000000000000000000000000000000000000000000000000008214156102d15780600181905550610322565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806106b56026913960400191505060405180910390fd5b817fe986e40cc8c151830d4f61050f4fb2e4add8567caad2d5f5496f9158e91fe4c7826040518082815260200191505060405180910390a25050565b6000600154821061037257600090506103a3565b6103a08360015461039385600154036b033b2e3c9fd0803ce8000000610643565b8161039a57fe5b0461066f565b90505b92915050565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461045d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4c696e65617244656372656173652f6e6f742d617574686f72697a656400000081525060200191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6060405160405180910390a250565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461059b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4c696e65617244656372656173652f6e6f742d617574686f72697a656400000081525060200191505060405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167f184450df2e323acec0ed3b5c7531b81f9b4cdef7914dfd4c0a4317416bb5251b60405160405180910390a250565b60006020528060005260406000206000915090505481565b60015481565b600080821480610660575082828385029250828161065d57fe5b04145b61066957600080fd5b92915050565b60008183029050600082148061068d57508282828161068a57fe5b04145b61069657600080fd5b6b033b2e3c9fd0803ce800000081816106ab57fe5b0490509291505056fe4c696e65617244656372656173652f66696c652d756e7265636f676e697a65642d706172616da26469706673582212209e8b94de2c914fa9fa6ccd50f86b8f08685922ae3441d6726773ca854dc7d06164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17,
        "contract": "contracts/abaci.sol:LinearDecrease",
        "label": "wards",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 69,
        "contract": "contracts/abaci.sol:LinearDecrease",
        "label": "tau",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
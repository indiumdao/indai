{
  "address": "0x701ea7FF45eE2E178DfC2E88A3E38eA92538336F",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "authority_",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "LogSetAuthority",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LogSetOwner",
      "type": "event"
    }
  ],
  "transactionHash": "0x834053efa79a780268495a969bda36b9695d6cda64a5b5da964bee68358e8d3f",
  "receipt": {
    "to": null,
    "from": "0x76677d82Cba9d7F2BB40670456AbaD808778635c",
    "contractAddress": "0x701ea7FF45eE2E178DfC2E88A3E38eA92538336F",
    "transactionIndex": 155,
    "gasUsed": "412898",
    "logsBloom": "0x
    "blockHash": "0x0293dfb847238eca3657068ac0cad3a2f2ebc10f82f6aea3091472ea87ad10f9",
    "transactionHash": "0x834053efa79a780268495a969bda36b9695d6cda64a5b5da964bee68358e8d3f",
    "logs": [
      {
        "transactionIndex": 155,
        "blockNumber": 8589937,
        "transactionHash": "0x834053efa79a780268495a969bda36b9695d6cda64a5b5da964bee68358e8d3f",
        "address": "0x701ea7FF45eE2E178DfC2E88A3E38eA92538336F",
        "topics": [
          "0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94",
          "0x00000000000000000000000076677d82cba9d7f2bb40670456abad808778635c"
        ],
        "data": "0x",
        "logIndex": 297,
        "blockHash": "0x0293dfb847238eca3657068ac0cad3a2f2ebc10f82f6aea3091472ea87ad10f9"
      }
    ],
    "blockNumber": 8589937,
    "cumulativeGasUsed": "18728331",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b67e9782981c625618913247167bc512",
  "metadata": "{\"compiler\":{\"version\":\"0.4.17+commit.bdeb9e52\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/external contracts/gem.sol\":\"DSAuth\"},\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/external contracts/gem.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at Etherscan.io on 2017-11-25\\r\\n */\\r\\n\\r\\n// MKR Token\\r\\n\\r\\n// hevm: flattened sources of src/mkr-499.sol\\r\\npragma solidity ^0.4.17;\\r\\n\\r\\n////// lib/ds-roles/lib/ds-auth/src/auth.sol\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\ncontract DSAuthority {\\r\\n    function canCall(\\r\\n        address src,\\r\\n        address dst,\\r\\n        bytes4 sig\\r\\n    ) public view returns (bool);\\r\\n}\\r\\n\\r\\ncontract DSAuthEvents {\\r\\n    event LogSetAuthority(address indexed authority);\\r\\n    event LogSetOwner(address indexed owner);\\r\\n}\\r\\n\\r\\ncontract DSAuth is DSAuthEvents {\\r\\n    DSAuthority public authority;\\r\\n    address public owner;\\r\\n\\r\\n    function DSAuth() public {\\r\\n        owner = msg.sender;\\r\\n        LogSetOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    function setOwner(address owner_) public auth {\\r\\n        owner = owner_;\\r\\n        LogSetOwner(owner);\\r\\n    }\\r\\n\\r\\n    function setAuthority(DSAuthority authority_) public auth {\\r\\n        authority = authority_;\\r\\n        LogSetAuthority(authority);\\r\\n    }\\r\\n\\r\\n    modifier auth() {\\r\\n        require(isAuthorized(msg.sender, msg.sig));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isAuthorized(\\r\\n        address src,\\r\\n        bytes4 sig\\r\\n    ) internal view returns (bool) {\\r\\n        if (src == address(this)) {\\r\\n            return true;\\r\\n        } else if (src == owner) {\\r\\n            return true;\\r\\n        } else if (authority == DSAuthority(0)) {\\r\\n            return false;\\r\\n        } else {\\r\\n            return authority.canCall(src, this, sig);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/ds-thing/lib/ds-math/src/math.sol\\r\\n/// math.sol -- mixin for inline numerical wizardry\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\ncontract DSMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x);\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x);\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x);\\r\\n    }\\r\\n\\r\\n    function min(uint x, uint y) internal pure returns (uint z) {\\r\\n        return x <= y ? x : y;\\r\\n    }\\r\\n\\r\\n    function max(uint x, uint y) internal pure returns (uint z) {\\r\\n        return x >= y ? x : y;\\r\\n    }\\r\\n\\r\\n    function imin(int x, int y) internal pure returns (int z) {\\r\\n        return x <= y ? x : y;\\r\\n    }\\r\\n\\r\\n    function imax(int x, int y) internal pure returns (int z) {\\r\\n        return x >= y ? x : y;\\r\\n    }\\r\\n\\r\\n    uint constant WAD = 10 ** 18;\\r\\n    uint constant RAY = 10 ** 27;\\r\\n\\r\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = add(mul(x, y), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = add(mul(x, y), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = add(mul(x, WAD), y / 2) / y;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = add(mul(x, RAY), y / 2) / y;\\r\\n    }\\r\\n\\r\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\r\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\r\\n    //\\r\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\r\\n    //\\r\\n    // These facts are why it works:\\r\\n    //\\r\\n    //  If n is even, then x^n = (x^2)^(n/2).\\r\\n    //  If n is odd,  then x^n = x * x^(n-1),\\r\\n    //   and applying the equation for even x gives\\r\\n    //    x^n = x * (x^2)^((n-1) / 2).\\r\\n    //\\r\\n    //  Also, EVM division is flooring and\\r\\n    //    floor[(n-1) / 2] = floor[n / 2].\\r\\n    //\\r\\n    function rpow(uint x, uint n) internal pure returns (uint z) {\\r\\n        z = n % 2 != 0 ? x : RAY;\\r\\n\\r\\n        for (n /= 2; n != 0; n /= 2) {\\r\\n            x = rmul(x, x);\\r\\n\\r\\n            if (n % 2 != 0) {\\r\\n                z = rmul(z, x);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/ds-thing/lib/ds-note/src/note.sol\\r\\n/// note.sol -- the `note' modifier, for logging calls as events\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\ncontract DSNote {\\r\\n    event LogNote(\\r\\n        bytes4 indexed sig,\\r\\n        address indexed guy,\\r\\n        bytes32 indexed foo,\\r\\n        bytes32 indexed bar,\\r\\n        uint wad,\\r\\n        bytes fax\\r\\n    ) anonymous;\\r\\n\\r\\n    modifier note() {\\r\\n        bytes32 foo;\\r\\n        bytes32 bar;\\r\\n\\r\\n        assembly {\\r\\n            foo := calldataload(4)\\r\\n            bar := calldataload(36)\\r\\n        }\\r\\n\\r\\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\\r\\n\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/ds-thing/src/thing.sol\\r\\n// thing.sol - `auth` with handy mixins. your things should be DSThings\\r\\n\\r\\n// Copyright (C) 2017  DappHub, LLC\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\n/* import 'ds-auth/auth.sol'; */\\r\\n/* import 'ds-note/note.sol'; */\\r\\n/* import 'ds-math/math.sol'; */\\r\\n\\r\\ncontract DSThing is DSAuth, DSNote, DSMath {\\r\\n\\r\\n}\\r\\n\\r\\n////// lib/ds-token/lib/ds-stop/src/stop.sol\\r\\n/// stop.sol -- mixin for enable/disable functionality\\r\\n\\r\\n// Copyright (C) 2017  DappHub, LLC\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\n/* import \\\"ds-auth/auth.sol\\\"; */\\r\\n/* import \\\"ds-note/note.sol\\\"; */\\r\\n\\r\\ncontract DSStop is DSNote, DSAuth {\\r\\n    bool public stopped;\\r\\n\\r\\n    modifier stoppable() {\\r\\n        require(!stopped);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function stop() public auth note {\\r\\n        stopped = true;\\r\\n    }\\r\\n\\r\\n    function start() public auth note {\\r\\n        stopped = false;\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/ds-token/lib/erc20/src/erc20.sol\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.8; */\\r\\n\\r\\n// Token standard API\\r\\n// https://github.com/ethereum/EIPs/issues/20\\r\\n\\r\\ncontract ERC20 {\\r\\n    function totalSupply() public view returns (uint supply);\\r\\n\\r\\n    function balanceOf(address who) public view returns (uint value);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view returns (uint _allowance);\\r\\n\\r\\n    function transfer(address to, uint value) public returns (bool ok);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint value\\r\\n    ) public returns (bool ok);\\r\\n\\r\\n    function approve(address spender, uint value) public returns (bool ok);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\n////// lib/ds-token/src/base.sol\\r\\n/// base.sol -- basic ERC20 implementation\\r\\n\\r\\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\n/* import \\\"erc20/erc20.sol\\\"; */\\r\\n/* import \\\"ds-math/math.sol\\\"; */\\r\\n\\r\\ncontract DSTokenBase is ERC20, DSMath {\\r\\n    uint256 _supply;\\r\\n    mapping(address => uint256) _balances;\\r\\n    mapping(address => mapping(address => uint256)) _approvals;\\r\\n\\r\\n    function DSTokenBase(uint supply) public {\\r\\n        _balances[msg.sender] = supply;\\r\\n        _supply = supply;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint) {\\r\\n        return _supply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address src) public view returns (uint) {\\r\\n        return _balances[src];\\r\\n    }\\r\\n\\r\\n    function allowance(address src, address guy) public view returns (uint) {\\r\\n        return _approvals[src][guy];\\r\\n    }\\r\\n\\r\\n    function transfer(address dst, uint wad) public returns (bool) {\\r\\n        return transferFrom(msg.sender, dst, wad);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint wad\\r\\n    ) public returns (bool) {\\r\\n        if (src != msg.sender) {\\r\\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\\r\\n        }\\r\\n\\r\\n        _balances[src] = sub(_balances[src], wad);\\r\\n        _balances[dst] = add(_balances[dst], wad);\\r\\n\\r\\n        Transfer(src, dst, wad);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address guy, uint wad) public returns (bool) {\\r\\n        _approvals[msg.sender][guy] = wad;\\r\\n\\r\\n        Approval(msg.sender, guy, wad);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/ds-token/src/token.sol\\r\\n/// token.sol -- ERC20 implementation with minting and burning\\r\\n\\r\\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\n/* import \\\"ds-stop/stop.sol\\\"; */\\r\\n\\r\\n/* import \\\"./base.sol\\\"; */\\r\\n\\r\\ncontract DSToken is DSTokenBase(0), DSStop {\\r\\n    bytes32 public symbol;\\r\\n    uint256 public decimals = 18; // standard token precision. override to customize\\r\\n\\r\\n    function DSToken(bytes32 symbol_) public {\\r\\n        symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    event Mint(address indexed guy, uint wad);\\r\\n    event Burn(address indexed guy, uint wad);\\r\\n\\r\\n    function approve(address guy) public stoppable returns (bool) {\\r\\n        return super.approve(guy, uint(-1));\\r\\n    }\\r\\n\\r\\n    function approve(address guy, uint wad) public stoppable returns (bool) {\\r\\n        return super.approve(guy, wad);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint wad\\r\\n    ) public stoppable returns (bool) {\\r\\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\\r\\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\\r\\n        }\\r\\n\\r\\n        _balances[src] = sub(_balances[src], wad);\\r\\n        _balances[dst] = add(_balances[dst], wad);\\r\\n\\r\\n        Transfer(src, dst, wad);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function push(address dst, uint wad) public {\\r\\n        transferFrom(msg.sender, dst, wad);\\r\\n    }\\r\\n\\r\\n    function pull(address src, uint wad) public {\\r\\n        transferFrom(src, msg.sender, wad);\\r\\n    }\\r\\n\\r\\n    function move(address src, address dst, uint wad) public {\\r\\n        transferFrom(src, dst, wad);\\r\\n    }\\r\\n\\r\\n    function mint(uint wad) public {\\r\\n        mint(msg.sender, wad);\\r\\n    }\\r\\n\\r\\n    function burn(uint wad) public {\\r\\n        burn(msg.sender, wad);\\r\\n    }\\r\\n\\r\\n    function mint(address guy, uint wad) public auth stoppable {\\r\\n        _balances[guy] = add(_balances[guy], wad);\\r\\n        _supply = add(_supply, wad);\\r\\n        Mint(guy, wad);\\r\\n    }\\r\\n\\r\\n    function burn(address guy, uint wad) public auth stoppable {\\r\\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\\r\\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\\r\\n        }\\r\\n\\r\\n        _balances[guy] = sub(_balances[guy], wad);\\r\\n        _supply = sub(_supply, wad);\\r\\n        Burn(guy, wad);\\r\\n    }\\r\\n\\r\\n    // Optional token name\\r\\n    bytes32 public name = \\\"\\\";\\r\\n\\r\\n    function setName(bytes32 name_) public auth {\\r\\n        name = name_;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6350ac77e45630327af443e4b2951f29cc6c6661c547d790a1537f98bd19e621\"}},\"version\":1}",
  "bytecode": "0x6060604052341561000f57600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2610612806100a26000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af40351461005e5780637a9e5e4b146100975780638da5cb5b146100d0578063bf7e214f1461012557600080fd5b341561006957600080fd5b610095600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061017a565b005b34156100a257600080fd5b6100ce600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061025c565b005b34156100db57600080fd5b6100e361033c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561013057600080fd5b610138610362565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101a8336000357fffffffff0000000000000000000000000000000000000000000000000000000016610387565b15156101b357600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b61028a336000357fffffffff0000000000000000000000000000000000000000000000000000000016610387565b151561029557600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103c657600190506105e0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561042557600190506105e0565b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561048457600090506105e0565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019350505050602060405180830381600087803b15156105c257600080fd5b6102c65a03f115156105d357600080fd5b5050506040518051905090505b929150505600a165627a7a7230582022c0496b9ac4b237dce054ba404b3614c5f2a4d6d71254db1526ac8bc066a9380029",
  "deployedBytecode": "0x60606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af40351461005e5780637a9e5e4b146100975780638da5cb5b146100d0578063bf7e214f1461012557600080fd5b341561006957600080fd5b610095600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061017a565b005b34156100a257600080fd5b6100ce600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061025c565b005b34156100db57600080fd5b6100e361033c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561013057600080fd5b610138610362565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101a8336000357fffffffff0000000000000000000000000000000000000000000000000000000016610387565b15156101b357600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b61028a336000357fffffffff0000000000000000000000000000000000000000000000000000000016610387565b151561029557600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103c657600190506105e0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561042557600190506105e0565b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561048457600090506105e0565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019350505050602060405180830381600087803b15156105c257600080fd5b6102c65a03f115156105d357600080fd5b5050506040518051905090505b929150505600a165627a7a7230582022c0496b9ac4b237dce054ba404b3614c5f2a4d6d71254db1526ac8bc066a9380029",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}
{
  "address": "0x0D82bF17c32538aB77147Bd16f1db3D3b8d82C71",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vat_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spotter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dog_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ilk_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "Deny",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "File",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "File",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "top",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tab",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "kpr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin",
          "type": "uint256"
        }
      ],
      "name": "Kick",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "top",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tab",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "kpr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin",
          "type": "uint256"
        }
      ],
      "name": "Redo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "Rely",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "owe",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tab",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "Take",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Yank",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "active",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calc",
      "outputs": [
        {
          "internalType": "contract AbacusLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chip",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cusp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "deny",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dog",
      "outputs": [
        {
          "internalType": "contract DogLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "file",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "file",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "needsRedo",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tab",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ilk",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tab",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lot",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kpr",
          "type": "address"
        }
      ],
      "name": "kick",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kicks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "list",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "kpr",
          "type": "address"
        }
      ],
      "name": "redo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "rely",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sales",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pos",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tab",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lot",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "tic",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "top",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spotter",
      "outputs": [
        {
          "internalType": "contract SpotterLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopped",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tail",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "take",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tip",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upchost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vat",
      "outputs": [
        {
          "internalType": "contract VatLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "wards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "yank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa767d720aa4029cbf244c6897d6674fbcd1aefab284826070383371c5e17d40c",
  "receipt": {
    "to": null,
    "from": "0x76677d82Cba9d7F2BB40670456AbaD808778635c",
    "contractAddress": "0x0D82bF17c32538aB77147Bd16f1db3D3b8d82C71",
    "transactionIndex": 0,
    "gasUsed": "3325829",
    "logsBloom": "0x
    "blockHash": "0xa23b5d2fa178410ff120ecea5b1610db8c7776316a57baf331c13cadfefc8b9e",
    "transactionHash": "0xa767d720aa4029cbf244c6897d6674fbcd1aefab284826070383371c5e17d40c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8375082,
        "transactionHash": "0xa767d720aa4029cbf244c6897d6674fbcd1aefab284826070383371c5e17d40c",
        "address": "0x0D82bF17c32538aB77147Bd16f1db3D3b8d82C71",
        "topics": [
          "0xdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a60",
          "0x00000000000000000000000076677d82cba9d7f2bb40670456abad808778635c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa23b5d2fa178410ff120ecea5b1610db8c7776316a57baf331c13cadfefc8b9e"
      }
    ],
    "blockNumber": 8375082,
    "cumulativeGasUsed": "3325829",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x310dbaab8dde911c229821a997ff8b3b1d37ae1c",
    "0x6f2155b03020621B3796150f6b3792Bc8ABb8844",
    "0xaD2A9E0C3C732D4De17bE93F44b742b113c710b9",
    "0x4554482d41000000000000000000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "ed048294ed74b7abd11bdebd540fd1ff",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spotter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dog_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"top\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kpr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin\",\"type\":\"uint256\"}],\"name\":\"Kick\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"top\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kpr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin\",\"type\":\"uint256\"}],\"name\":\"Redo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"owe\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Take\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Yank\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"active\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calc\",\"outputs\":[{\"internalType\":\"contract AbacusLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chip\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cusp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dog\",\"outputs\":[{\"internalType\":\"contract DogLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"needsRedo\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kpr\",\"type\":\"address\"}],\"name\":\"kick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kicks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kpr\",\"type\":\"address\"}],\"name\":\"redo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tic\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"top\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"internalType\":\"contract SpotterLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tip\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upchost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"yank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/clip.sol\":\"Clipper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/clip.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// clip.sol -- Dai auction module 2.0\\n\\n// Copyright (C) 2020-2022 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published\\n// by the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.6.12;\\n\\ninterface VatLike {\\n    function move(address,address,uint256) external;\\n    function flux(bytes32,address,address,uint256) external;\\n    function ilks(bytes32) external returns (uint256, uint256, uint256, uint256, uint256);\\n    function suck(address,address,uint256) external;\\n}\\n\\ninterface PipLike {\\n    function peek() external returns (bytes32, bool);\\n}\\n\\ninterface SpotterLike {\\n    function par() external returns (uint256);\\n    function ilks(bytes32) external returns (PipLike, uint256);\\n}\\n\\ninterface DogLike {\\n    function chop(bytes32) external returns (uint256);\\n    function digs(bytes32, uint256) external;\\n}\\n\\ninterface ClipperCallee {\\n    function clipperCall(address, uint256, uint256, bytes calldata) external;\\n}\\n\\ninterface AbacusLike {\\n    function price(uint256, uint256) external view returns (uint256);\\n}\\n\\ncontract Clipper {\\n    // --- Auth ---\\n    mapping (address => uint256) public wards;\\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\\n    modifier auth {\\n        require(wards[msg.sender] == 1, \\\"Clipper/not-authorized\\\");\\n        _;\\n    }\\n\\n    // --- Data ---\\n    bytes32  immutable public ilk;   // Collateral type of this Clipper\\n    VatLike  immutable public vat;   // Core CDP Engine\\n\\n    DogLike     public dog;      // Liquidation module\\n    address     public vow;      // Recipient of dai raised in auctions\\n    SpotterLike public spotter;  // Collateral price module\\n    AbacusLike  public calc;     // Current price calculator\\n\\n    uint256 public buf;    // Multiplicative factor to increase starting price                  [ray]\\n    uint256 public tail;   // Time elapsed before auction reset                                 [seconds]\\n    uint256 public cusp;   // Percentage drop before auction reset                              [ray]\\n    uint64  public chip;   // Percentage of tab to suck from vow to incentivize keepers         [wad]\\n    uint192 public tip;    // Flat fee to suck from vow to incentivize keepers                  [rad]\\n    uint256 public chost;  // Cache the ilk dust times the ilk chop to prevent excessive SLOADs [rad]\\n\\n    uint256   public kicks;   // Total auctions\\n    uint256[] public active;  // Array of active auction ids\\n\\n    struct Sale {\\n        uint256 pos;  // Index in active array\\n        uint256 tab;  // Dai to raise       [rad]\\n        uint256 lot;  // collateral to sell [wad]\\n        address usr;  // Liquidated CDP\\n        uint96  tic;  // Auction start time\\n        uint256 top;  // Starting price     [ray]\\n    }\\n    mapping(uint256 => Sale) public sales;\\n\\n    uint256 internal locked;\\n\\n    // Levels for circuit breaker\\n    // 0: no breaker\\n    // 1: no new kick()\\n    // 2: no new kick() or redo()\\n    // 3: no new kick(), redo(), or take()\\n    uint256 public stopped = 0;\\n\\n    // --- Events ---\\n    event Rely(address indexed usr);\\n    event Deny(address indexed usr);\\n\\n    event File(bytes32 indexed what, uint256 data);\\n    event File(bytes32 indexed what, address data);\\n\\n    event Kick(\\n        uint256 indexed id,\\n        uint256 top,\\n        uint256 tab,\\n        uint256 lot,\\n        address indexed usr,\\n        address indexed kpr,\\n        uint256 coin\\n    );\\n    event Take(\\n        uint256 indexed id,\\n        uint256 max,\\n        uint256 price,\\n        uint256 owe,\\n        uint256 tab,\\n        uint256 lot,\\n        address indexed usr\\n    );\\n    event Redo(\\n        uint256 indexed id,\\n        uint256 top,\\n        uint256 tab,\\n        uint256 lot,\\n        address indexed usr,\\n        address indexed kpr,\\n        uint256 coin\\n    );\\n\\n    event Yank(uint256 id);\\n\\n    // --- Init ---\\n    constructor(address vat_, address spotter_, address dog_, bytes32 ilk_) public {\\n        vat     = VatLike(vat_);\\n        spotter = SpotterLike(spotter_);\\n        dog     = DogLike(dog_);\\n        ilk     = ilk_;\\n        buf     = RAY;\\n        wards[msg.sender] = 1;\\n        emit Rely(msg.sender);\\n    }\\n\\n    // --- Synchronization ---\\n    modifier lock {\\n        require(locked == 0, \\\"Clipper/system-locked\\\");\\n        locked = 1;\\n        _;\\n        locked = 0;\\n    }\\n\\n    modifier isStopped(uint256 level) {\\n        require(stopped < level, \\\"Clipper/stopped-incorrect\\\");\\n        _;\\n    }\\n\\n    // --- Administration ---\\n    function file(bytes32 what, uint256 data) external auth lock {\\n        if      (what == \\\"buf\\\")         buf = data;\\n        else if (what == \\\"tail\\\")       tail = data;           // Time elapsed before auction reset\\n        else if (what == \\\"cusp\\\")       cusp = data;           // Percentage drop before auction reset\\n        else if (what == \\\"chip\\\")       chip = uint64(data);   // Percentage of tab to incentivize (max: 2^64 - 1 => 18.xxx WAD = 18xx%)\\n        else if (what == \\\"tip\\\")         tip = uint192(data);  // Flat fee to incentivize keepers (max: 2^192 - 1 => 6.277T RAD)\\n        else if (what == \\\"stopped\\\") stopped = data;           // Set breaker (0, 1, 2, or 3)\\n        else revert(\\\"Clipper/file-unrecognized-param\\\");\\n        emit File(what, data);\\n    }\\n    function file(bytes32 what, address data) external auth lock {\\n        if (what == \\\"spotter\\\") spotter = SpotterLike(data);\\n        else if (what == \\\"dog\\\")    dog = DogLike(data);\\n        else if (what == \\\"vow\\\")    vow = data;\\n        else if (what == \\\"calc\\\")  calc = AbacusLike(data);\\n        else revert(\\\"Clipper/file-unrecognized-param\\\");\\n        emit File(what, data);\\n    }\\n\\n    // --- Math ---\\n    uint256 constant BLN = 10 **  9;\\n    uint256 constant WAD = 10 ** 18;\\n    uint256 constant RAY = 10 ** 27;\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x <= y ? x : y;\\n    }\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = mul(x, y) / WAD;\\n    }\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = mul(x, y) / RAY;\\n    }\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = mul(x, RAY) / y;\\n    }\\n\\n    // --- Auction ---\\n\\n    // get the price directly from the OSM\\n    // Could get this from rmul(Vat.ilks(ilk).spot, Spotter.mat()) instead, but\\n    // if mat has changed since the last poke, the resulting value will be\\n    // incorrect.\\n    function getFeedPrice() internal returns (uint256 feedPrice) {\\n        (PipLike pip, ) = spotter.ilks(ilk);\\n        (bytes32 val, bool has) = pip.peek();\\n        require(has, \\\"Clipper/invalid-price\\\");\\n        feedPrice = rdiv(mul(uint256(val), BLN), spotter.par());\\n    }\\n\\n    // start an auction\\n    // note: trusts the caller to transfer collateral to the contract\\n    // The starting price `top` is obtained as follows:\\n    //\\n    //     top = val * buf / par\\n    //\\n    // Where `val` is the collateral's unitary value in USD, `buf` is a\\n    // multiplicative factor to increase the starting price, and `par` is a\\n    // reference per DAI.\\n    function kick(\\n        uint256 tab,  // Debt                   [rad]\\n        uint256 lot,  // Collateral             [wad]\\n        address usr,  // Address that will receive any leftover collateral\\n        address kpr   // Address that will receive incentives\\n    ) external auth lock isStopped(1) returns (uint256 id) {\\n        // Input validation\\n        require(tab  >          0, \\\"Clipper/zero-tab\\\");\\n        require(lot  >          0, \\\"Clipper/zero-lot\\\");\\n        require(usr != address(0), \\\"Clipper/zero-usr\\\");\\n        id = ++kicks;\\n        require(id   >          0, \\\"Clipper/overflow\\\");\\n\\n        active.push(id);\\n\\n        sales[id].pos = active.length - 1;\\n\\n        sales[id].tab = tab;\\n        sales[id].lot = lot;\\n        sales[id].usr = usr;\\n        sales[id].tic = uint96(block.timestamp);\\n\\n        uint256 top;\\n        top = rmul(getFeedPrice(), buf);\\n        require(top > 0, \\\"Clipper/zero-top-price\\\");\\n        sales[id].top = top;\\n\\n        // incentive to kick auction\\n        uint256 _tip  = tip;\\n        uint256 _chip = chip;\\n        uint256 coin;\\n        if (_tip > 0 || _chip > 0) {\\n            coin = add(_tip, wmul(tab, _chip));\\n            vat.suck(vow, kpr, coin);\\n        }\\n\\n        emit Kick(id, top, tab, lot, usr, kpr, coin);\\n    }\\n\\n    // Reset an auction\\n    // See `kick` above for an explanation of the computation of `top`.\\n    function redo(\\n        uint256 id,  // id of the auction to reset\\n        address kpr  // Address that will receive incentives\\n    ) external lock isStopped(2) {\\n        // Read auction data\\n        address usr = sales[id].usr;\\n        uint96  tic = sales[id].tic;\\n        uint256 top = sales[id].top;\\n\\n        require(usr != address(0), \\\"Clipper/not-running-auction\\\");\\n\\n        // Check that auction needs reset\\n        // and compute current price [ray]\\n        (bool done,) = status(tic, top);\\n        require(done, \\\"Clipper/cannot-reset\\\");\\n\\n        uint256 tab   = sales[id].tab;\\n        uint256 lot   = sales[id].lot;\\n        sales[id].tic = uint96(block.timestamp);\\n\\n        uint256 feedPrice = getFeedPrice();\\n        top = rmul(feedPrice, buf);\\n        require(top > 0, \\\"Clipper/zero-top-price\\\");\\n        sales[id].top = top;\\n\\n        // incentive to redo auction\\n        uint256 _tip  = tip;\\n        uint256 _chip = chip;\\n        uint256 coin;\\n        if (_tip > 0 || _chip > 0) {\\n            uint256 _chost = chost;\\n            if (tab >= _chost && mul(lot, feedPrice) >= _chost) {\\n                coin = add(_tip, wmul(tab, _chip));\\n                vat.suck(vow, kpr, coin);\\n            }\\n        }\\n\\n        emit Redo(id, top, tab, lot, usr, kpr, coin);\\n    }\\n\\n    // Buy up to `amt` of collateral from the auction indexed by `id`.\\n    // \\n    // Auctions will not collect more DAI than their assigned DAI target,`tab`;\\n    // thus, if `amt` would cost more DAI than `tab` at the current price, the\\n    // amount of collateral purchased will instead be just enough to collect `tab` DAI.\\n    //\\n    // To avoid partial purchases resulting in very small leftover auctions that will\\n    // never be cleared, any partial purchase must leave at least `Clipper.chost`\\n    // remaining DAI target. `chost` is an asynchronously updated value equal to\\n    // (Vat.dust * Dog.chop(ilk) / WAD) where the values are understood to be determined\\n    // by whatever they were when Clipper.upchost() was last called. Purchase amounts\\n    // will be minimally decreased when necessary to respect this limit; i.e., if the\\n    // specified `amt` would leave `tab < chost` but `tab > 0`, the amount actually\\n    // purchased will be such that `tab == chost`.\\n    //\\n    // If `tab <= chost`, partial purchases are no longer possible; that is, the remaining\\n    // collateral can only be purchased entirely, or not at all.\\n    function take(\\n        uint256 id,           // Auction id\\n        uint256 amt,          // Upper limit on amount of collateral to buy  [wad]\\n        uint256 max,          // Maximum acceptable price (DAI / collateral) [ray]\\n        address who,          // Receiver of collateral and external call address\\n        bytes calldata data   // Data to pass in external call; if length 0, no call is done\\n    ) external lock isStopped(3) {\\n\\n        address usr = sales[id].usr;\\n        uint96  tic = sales[id].tic;\\n\\n        require(usr != address(0), \\\"Clipper/not-running-auction\\\");\\n\\n        uint256 price;\\n        {\\n            bool done;\\n            (done, price) = status(tic, sales[id].top);\\n\\n            // Check that auction doesn't need reset\\n            require(!done, \\\"Clipper/needs-reset\\\");\\n        }\\n\\n        // Ensure price is acceptable to buyer\\n        require(max >= price, \\\"Clipper/too-expensive\\\");\\n\\n        uint256 lot = sales[id].lot;\\n        uint256 tab = sales[id].tab;\\n        uint256 owe;\\n\\n        {\\n            // Purchase as much as possible, up to amt\\n            uint256 slice = min(lot, amt);  // slice <= lot\\n\\n            // DAI needed to buy a slice of this sale\\n            owe = mul(slice, price);\\n\\n            // Don't collect more than tab of DAI\\n            if (owe > tab) {\\n                // Total debt will be paid\\n                owe = tab;                  // owe' <= owe\\n                // Adjust slice\\n                slice = owe / price;        // slice' = owe' / price <= owe / price == slice <= lot\\n            } else if (owe < tab && slice < lot) {\\n                // If slice == lot => auction completed => dust doesn't matter\\n                uint256 _chost = chost;\\n                if (tab - owe < _chost) {    // safe as owe < tab\\n                    // If tab <= chost, buyers have to take the entire lot.\\n                    require(tab > _chost, \\\"Clipper/no-partial-purchase\\\");\\n                    // Adjust amount to pay\\n                    owe = tab - _chost;      // owe' <= owe\\n                    // Adjust slice\\n                    slice = owe / price;     // slice' = owe' / price < owe / price == slice < lot\\n                }\\n            }\\n\\n            // Calculate remaining tab after operation\\n            tab = tab - owe;  // safe since owe <= tab\\n            // Calculate remaining lot after operation\\n            lot = lot - slice;\\n\\n            // Send collateral to who\\n            vat.flux(ilk, address(this), who, slice);\\n\\n            // Do external call (if data is defined) but to be\\n            // extremely careful we don't allow to do it to the two\\n            // contracts which the Clipper needs to be authorized\\n            DogLike dog_ = dog;\\n            if (data.length > 0 && who != address(vat) && who != address(dog_)) {\\n                ClipperCallee(who).clipperCall(msg.sender, owe, slice, data);\\n            }\\n\\n            // Get DAI from caller\\n            vat.move(msg.sender, vow, owe);\\n\\n            // Removes Dai out for liquidation from accumulator\\n            dog_.digs(ilk, lot == 0 ? tab + owe : owe);\\n        }\\n\\n        if (lot == 0) {\\n            _remove(id);\\n        } else if (tab == 0) {\\n            vat.flux(ilk, address(this), usr, lot);\\n            _remove(id);\\n        } else {\\n            sales[id].tab = tab;\\n            sales[id].lot = lot;\\n        }\\n\\n        emit Take(id, max, price, owe, tab, lot, usr);\\n    }\\n\\n    function _remove(uint256 id) internal {\\n        uint256 _move    = active[active.length - 1];\\n        if (id != _move) {\\n            uint256 _index   = sales[id].pos;\\n            active[_index]   = _move;\\n            sales[_move].pos = _index;\\n        }\\n        active.pop();\\n        delete sales[id];\\n    }\\n\\n    // The number of active auctions\\n    function count() external view returns (uint256) {\\n        return active.length;\\n    }\\n\\n    // Return the entire array of active auctions\\n    function list() external view returns (uint256[] memory) {\\n        return active;\\n    }\\n\\n    // Externally returns boolean for if an auction needs a redo and also the current price\\n    function getStatus(uint256 id) external view returns (bool needsRedo, uint256 price, uint256 lot, uint256 tab) {\\n        // Read auction data\\n        address usr = sales[id].usr;\\n        uint96  tic = sales[id].tic;\\n\\n        bool done;\\n        (done, price) = status(tic, sales[id].top);\\n\\n        needsRedo = usr != address(0) && done;\\n        lot = sales[id].lot;\\n        tab = sales[id].tab;\\n    }\\n\\n    // Internally returns boolean for if an auction needs a redo\\n    function status(uint96 tic, uint256 top) internal view returns (bool done, uint256 price) {\\n        price = calc.price(top, sub(block.timestamp, tic));\\n        done  = (sub(block.timestamp, tic) > tail || rdiv(price, top) < cusp);\\n    }\\n\\n    // Public function to update the cached dust*chop value.\\n    function upchost() external {\\n        (,,,, uint256 _dust) = VatLike(vat).ilks(ilk);\\n        chost = wmul(_dust, dog.chop(ilk));\\n    }\\n\\n    // Cancel an auction during ES or via governance action.\\n    function yank(uint256 id) external auth lock {\\n        require(sales[id].usr != address(0), \\\"Clipper/not-running-auction\\\");\\n        dog.digs(ilk, sales[id].tab);\\n        vat.flux(ilk, address(this), msg.sender, sales[id].lot);\\n        _remove(id);\\n        emit Yank(id);\\n    }\\n}\\n\",\"keccak256\":\"0x233fd950602fe9f6c80805c6f8a5cc1e54b32e311b2497828fd70e73dc1b2252\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040526000600e5534801561001557600080fd5b50604051613c07380380613c078339818101604052608081101561003857600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080608081815250506b033b2e3c9fd0803ce800000060058190555060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6060405160405180910390a25050505060805160a05160601c6139cb61023c600039806108eb5280610e0552806113295280611a395280611b5d5280611cb15280611e605280612636528061324e5250806109275280610a295280610d785280610e415280611a755280611db65280611e9c52806129e952806136a752506139cb6000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806375f12b2111610104578063b61500e4116100a2578063c5ce281e11610071578063c5ce281e14610802578063cfdd330214610820578063d4e8be831461083e578063d843416d1461088c576101cf565b8063b61500e414610730578063ba2cdc7514610758578063bf353dbb14610776578063c3b3ad7f146107ce576101cf565b8063898eb267116100de578063898eb267146105a357806396f1b6be1461062f5780639c52a7f114610663578063b5f522f7146106a7576101cf565b806375f12b211461048c5780638033d581146104aa57806381a794cb146104ec576101cf565b806329ae81141161017157806349ed59311161014b57806349ed59311461039d5780635c622a0e146103bb578063626cb3c51461041457806365fae35e14610448576101cf565b806329ae8114146102fd5780632e77468d1461033557806336569e7714610369576101cf565b806313d8c840116101ad57806313d8c8401461025b578063152325151461027957806326e027f1146102975780632755cd2d146102c5576101cf565b806306661abd146101d45780630cbb5862146101f25780630f560cd7146101fc575b600080fd5b6101dc6108da565b6040518082815260200191505060405180910390f35b6101fa6108e7565b005b610204610ac7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561024757808201518184015260208101905061022c565b505050509050019250505060405180910390f35b610263610b1f565b6040518082815260200191505060405180910390f35b610281610b25565b6040518082815260200191505060405180910390f35b6102c3600480360360208110156102ad57600080fd5b8101908080359060200190929190505050610b2b565b005b6102cd610f53565b604051808277ffffffffffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103336004803603604081101561031357600080fd5b810190808035906020019092919080359060200190929190505050610f7b565b005b61033d611301565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610371611327565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103a561134b565b6040518082815260200191505060405180910390f35b6103e7600480360360208110156103d157600080fd5b8101908080359060200190929190505050611351565b60405180851515815260200184815260200183815260200182815260200194505050505060405180910390f35b61041c611467565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61048a6004803603602081101561045e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061148d565b005b6104946115cb565b6040518082815260200191505060405180910390f35b6104d6600480360360208110156104c057600080fd5b81019080803590602001909291905050506115d1565b6040518082815260200191505060405180910390f35b6105a1600480360360a081101561050257600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561055d57600080fd5b82018360208201111561056f57600080fd5b8035906020019184600183028401116401000000008311171561059157600080fd5b90919293919293905050506115f2565b005b610619600480360360808110156105b957600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612019565b6040518082815260200191505060405180910390f35b6106376127b1565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106a56004803603602081101561067957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127d7565b005b6106d3600480360360208110156106bd57600080fd5b8101908080359060200190929190505050612915565b604051808781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff168152602001828152602001965050505050505060405180910390f35b610738612989565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6107606129a3565b6040518082815260200191505060405180910390f35b6107b86004803603602081101561078c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129a9565b6040518082815260200191505060405180910390f35b6107d66129c1565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61080a6129e7565b6040518082815260200191505060405180910390f35b610828612a0b565b6040518082815260200191505060405180910390f35b61088a6004803603604081101561085457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a11565b005b6108d8600480360360408110156108a257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612dc8565b005b6000600b80549050905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d9638d367f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060a060405180830381600087803b15801561097c57600080fd5b505af1158015610990573d6000803e3d6000fd5b505050506040513d60a08110156109a657600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050945050505050610abe81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d79265387f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610a7e57600080fd5b505af1158015610a92573d6000803e3d6000fd5b505050506040513d6020811015610aa857600080fd5b81019080805190602001909291905050506133cd565b60098190555050565b6060600b805480602002602001604051908101604052809291908181526020018280548015610b1557602002820191906000526020600020905b815481526020019060010190808311610b01575b5050505050905090565b60065481565b60055481565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610bdf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b6000600d5414610c57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f73797374656d2d6c6f636b6564000000000000000000000081525060200191505060405180910390fd5b6001600d81905550600073ffffffffffffffffffffffffffffffffffffffff16600c600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f436c69707065722f6e6f742d72756e6e696e672d61756374696f6e000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87193f47f0000000000000000000000000000000000000000000000000000000000000000600c6000858152602001908152602001600020600101546040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015610deb57600080fd5b505af1158015610dff573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636111be2e7f00000000000000000000000000000000000000000000000000000000000000003033600c6000878152602001908152602001600020600201546040518563ffffffff1660e01b8152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050600060405180830381600087803b158015610ef057600080fd5b505af1158015610f04573d6000803e3d6000fd5b50505050610f11816133f2565b7f2c5d2826eb5903b8fc201cf48094b858f42f61c7eaac9aaf43ebed490138144e816040518082815260200191505060405180910390a16000600d8190555050565b60088054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1681565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461102f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b6000600d54146110a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f73797374656d2d6c6f636b6564000000000000000000000081525060200191505060405180910390fd5b6001600d819055507f62756600000000000000000000000000000000000000000000000000000000008214156110e357806005819055506112bd565b7f7461696c0000000000000000000000000000000000000000000000000000000082141561111757806006819055506112bc565b7f637573700000000000000000000000000000000000000000000000000000000082141561114b57806007819055506112bb565b7f63686970000000000000000000000000000000000000000000000000000000008214156111a15780600860006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506112ba565b7f746970000000000000000000000000000000000000000000000000000000000082141561121657806008806101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055506112b9565b7f73746f707065640000000000000000000000000000000000000000000000000082141561124a5780600e819055506112b8565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f436c69707065722f66696c652d756e7265636f676e697a65642d706172616d0081525060200191505060405180910390fd5b5b5b5b5b5b817fe986e40cc8c151830d4f61050f4fb2e4add8567caad2d5f5496f9158e91fe4c7826040518082815260200191505060405180910390a26000600d819055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60075481565b6000806000806000600c600087815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600c600088815260200190815260200160002060030160149054906101000a90046bffffffffffffffffffffffff16905060006113e782600c60008b815260200190815260200160002060040154613512565b8097508192505050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156114295750805b9650600c6000898152602001908152602001600020600201549450600c60008981526020019081526020016000206001015493505050509193509193565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611541576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6060405160405180910390a250565b600e5481565b600b81815481106115de57fe5b906000526020600020016000915090505481565b6000600d541461166a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f73797374656d2d6c6f636b6564000000000000000000000081525060200191505060405180910390fd5b6001600d81905550600380600e54106116eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f436c69707065722f73746f707065642d696e636f72726563740000000000000081525060200191505060405180910390fd5b6000600c600089815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600c60008a815260200190815260200160002060030160149054906101000a90046bffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f436c69707065722f6e6f742d72756e6e696e672d61756374696f6e000000000081525060200191505060405180910390fd5b60008061181f83600c60008e815260200190815260200160002060040154613512565b8093508192505050801561189b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f436c69707065722f6e656564732d72657365740000000000000000000000000081525060200191505060405180910390fd5b5080881015611912576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f746f6f2d657870656e73697665000000000000000000000081525060200191505060405180910390fd5b6000600c60008c81526020019081526020016000206002015490506000600c60008d8152602001908152602001600020600101549050600080611955848e61361e565b90506119618186613638565b91508282111561197f5782915084828161197757fe5b049050611a2d565b828210801561198d57508381105b15611a2c5760006009549050808385031015611a2a57808411611a18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f436c69707065722f6e6f2d7061727469616c2d7075726368617365000000000081525060200191505060405180910390fd5b8084039250858381611a2657fe5b0491505b505b5b818303925080840393507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636111be2e7f0000000000000000000000000000000000000000000000000000000000000000308e856040518563ffffffff1660e01b8152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050600060405180830381600087803b158015611b0e57600080fd5b505af1158015611b22573d6000803e3d6000fd5b505050506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008b8b9050118015611bac57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614155b8015611be457508073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614155b15611caf578b73ffffffffffffffffffffffffffffffffffffffff16638452c10e3385858f8f6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015611c9657600080fd5b505af1158015611caa573d6000803e3d6000fd5b505050505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb35783b33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015611d8057600080fd5b505af1158015611d94573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663c87193f47f000000000000000000000000000000000000000000000000000000000000000060008814611de35785611de7565b8587015b6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015611e2457600080fd5b505af1158015611e38573d6000803e3d6000fd5b5050505050506000831415611e5557611e508d6133f2565b611f93565b6000821415611f5b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636111be2e7f00000000000000000000000000000000000000000000000000000000000000003089876040518563ffffffff1660e01b8152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050600060405180830381600087803b158015611f3557600080fd5b505af1158015611f49573d6000803e3d6000fd5b50505050611f568d6133f2565b611f92565b81600c60008f81526020019081526020016000206001018190555082600c60008f8152602001908152602001600020600201819055505b5b8573ffffffffffffffffffffffffffffffffffffffff168d7f05e309fd6ce72f2ab888a20056bb4210df08daed86f21f95053deb19964d86b18d87858789604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a3505050505050506000600d81905550505050505050565b600060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146120cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b6000600d5414612147576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f73797374656d2d6c6f636b6564000000000000000000000081525060200191505060405180910390fd5b6001600d81905550600180600e54106121c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f436c69707065722f73746f707065642d696e636f72726563740000000000000081525060200191505060405180910390fd5b6000861161223e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f436c69707065722f7a65726f2d7461620000000000000000000000000000000081525060200191505060405180910390fd5b600085116122b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f436c69707065722f7a65726f2d6c6f740000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612357576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f436c69707065722f7a65726f2d7573720000000000000000000000000000000081525060200191505060405180910390fd5b600a600081546001019190508190559150600082116123de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f436c69707065722f6f766572666c6f770000000000000000000000000000000081525060200191505060405180910390fd5b600b8290806001815401808255809150506001900390600052602060002001600090919091909150556001600b8054905003600c60008481526020019081526020016000206000018190555085600c60008481526020019081526020016000206001018190555084600c60008481526020019081526020016000206002018190555083600c600084815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600c600084815260200190815260200160002060030160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550600061250f612507613664565b60055461390f565b905060008111612587576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f7a65726f2d746f702d70726963650000000000000000000081525060200191505060405180910390fd5b80600c600085815260200190815260200160002060040181905550600060088054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1690506000600860009054906101000a900467ffffffffffffffff1667ffffffffffffffff16905060008083118061261a5750600082115b1561271e576126328361262d8c856133cd565b613938565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f24e23eb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561270557600080fd5b505af1158015612719573d6000803e3d6000fd5b505050505b8673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16877f7c5bfdc0a5e8192f6cd4972f382cec69116862fb62e6abff8003874c58e064b8878e8e876040518085815260200184815260200183815260200182815260200194505050505060405180910390a450505050506000600d81905550949350505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461288b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167f184450df2e323acec0ed3b5c7531b81f9b4cdef7914dfd4c0a4317416bb5251b60405160405180910390a250565b600c6020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160149054906101000a90046bffffffffffffffffffffffff16908060040154905086565b600860009054906101000a900467ffffffffffffffff1681565b60095481565b60006020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a5481565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414612ac5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b6000600d5414612b3d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f73797374656d2d6c6f636b6564000000000000000000000081525060200191505060405180910390fd5b6001600d819055507f73706f7474657200000000000000000000000000000000000000000000000000821415612bb35780600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612d6e565b7f646f670000000000000000000000000000000000000000000000000000000000821415612c215780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612d6d565b7f766f770000000000000000000000000000000000000000000000000000000000821415612c8f5780600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612d6c565b7f63616c6300000000000000000000000000000000000000000000000000000000821415612cfd5780600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612d6b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f436c69707065722f66696c652d756e7265636f676e697a65642d706172616d0081525060200191505060405180910390fd5b5b5b5b817f8fef588b5fc1afbf5b2f06c1a435d513f208da2e6704c3d8f0e0ec91167066ba82604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a26000600d819055505050565b6000600d5414612e40576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f73797374656d2d6c6f636b6564000000000000000000000081525060200191505060405180910390fd5b6001600d81905550600280600e5410612ec1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f436c69707065722f73746f707065642d696e636f72726563740000000000000081525060200191505060405180910390fd5b6000600c600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600c600086815260200190815260200160002060030160149054906101000a90046bffffffffffffffffffffffff1690506000600c6000878152602001908152602001600020600401549050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612fed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f436c69707065722f6e6f742d72756e6e696e672d61756374696f6e000000000081525060200191505060405180910390fd5b6000612ff98383613512565b5090508061306f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436c69707065722f63616e6e6f742d726573657400000000000000000000000081525060200191505060405180910390fd5b6000600c60008981526020019081526020016000206001015490506000600c60008a815260200190815260200160002060020154905042600c60008b815260200190815260200160002060030160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060006130f4613664565b90506131028160055461390f565b94506000851161317a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f7a65726f2d746f702d70726963650000000000000000000081525060200191505060405180910390fd5b84600c60008c815260200190815260200160002060040181905550600060088054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1690506000600860009054906101000a900467ffffffffffffffff1667ffffffffffffffff16905060008083118061320d5750600082115b15613338576000600954905080871015801561323257508061322f8787613638565b10155b156133365761324a8461324589866133cd565b613938565b91507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f24e23eb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168f856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561331d57600080fd5b505af1158015613331573d6000803e3d6000fd5b505050505b505b8b73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168e7f275de7ecdd375b5e8049319f8b350686131c219dd4dc450a08e9cf83b03c865f8b8a8a876040518085815260200184815260200183815260200182815260200194505050505060405180910390a450505050505050505050506000600d819055505050565b6000670de0b6b3a76400006133e28484613638565b816133e957fe5b04905092915050565b6000600b6001600b80549050038154811061340957fe5b90600052602060002001549050808214613471576000600c600084815260200190815260200160002060000154905081600b828154811061344657fe5b906000526020600020018190555080600c600084815260200190815260200160002060000181905550505b600b80548061347c57fe5b60019003818190600052602060002001600090559055600c6000838152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a8154906bffffffffffffffffffffffff0219169055600482016000905550505050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663487a23958461356c42886bffffffffffffffffffffffff16613952565b6040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b1580156135a757600080fd5b505afa1580156135bb573d6000803e3d6000fd5b505050506040513d60208110156135d157600080fd5b810190808051906020019092919050505090506006546135ff42866bffffffffffffffffffffffff16613952565b11806136155750600754613613828561396c565b105b91509250929050565b60008183111561362e5781613630565b825b905092915050565b600080821480613655575082828385029250828161365257fe5b04145b61365e57600080fd5b92915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d9638d367f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401808281526020019150506040805180830381600087803b1580156136fb57600080fd5b505af115801561370f573d6000803e3d6000fd5b505050506040513d604081101561372557600080fd5b8101908080519060200190929190805190602001909291905050505090506000808273ffffffffffffffffffffffffffffffffffffffff166359e02dd76040518163ffffffff1660e01b81526004016040805180830381600087803b15801561378d57600080fd5b505af11580156137a1573d6000803e3d6000fd5b505050506040513d60408110156137b757600080fd5b8101908080519060200190929190805190602001909291905050509150915080613849576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f696e76616c69642d7072696365000000000000000000000081525060200191505060405180910390fd5b61390761385d8360001c633b9aca00613638565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663495d32cb6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156138c757600080fd5b505af11580156138db573d6000803e3d6000fd5b505050506040513d60208110156138f157600080fd5b810190808051906020019092919050505061396c565b935050505090565b60006b033b2e3c9fd0803ce80000006139288484613638565b8161392f57fe5b04905092915050565b600082828401915081101561394c57600080fd5b92915050565b600082828403915081111561396657600080fd5b92915050565b600081613985846b033b2e3c9fd0803ce8000000613638565b8161398c57fe5b0490509291505056fea2646970667358221220e761f407bbe717a98b0a62a8d64c5ba7dffe09b7dcbec69f277c88b0bbdc3fd664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806375f12b2111610104578063b61500e4116100a2578063c5ce281e11610071578063c5ce281e14610802578063cfdd330214610820578063d4e8be831461083e578063d843416d1461088c576101cf565b8063b61500e414610730578063ba2cdc7514610758578063bf353dbb14610776578063c3b3ad7f146107ce576101cf565b8063898eb267116100de578063898eb267146105a357806396f1b6be1461062f5780639c52a7f114610663578063b5f522f7146106a7576101cf565b806375f12b211461048c5780638033d581146104aa57806381a794cb146104ec576101cf565b806329ae81141161017157806349ed59311161014b57806349ed59311461039d5780635c622a0e146103bb578063626cb3c51461041457806365fae35e14610448576101cf565b806329ae8114146102fd5780632e77468d1461033557806336569e7714610369576101cf565b806313d8c840116101ad57806313d8c8401461025b578063152325151461027957806326e027f1146102975780632755cd2d146102c5576101cf565b806306661abd146101d45780630cbb5862146101f25780630f560cd7146101fc575b600080fd5b6101dc6108da565b6040518082815260200191505060405180910390f35b6101fa6108e7565b005b610204610ac7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561024757808201518184015260208101905061022c565b505050509050019250505060405180910390f35b610263610b1f565b6040518082815260200191505060405180910390f35b610281610b25565b6040518082815260200191505060405180910390f35b6102c3600480360360208110156102ad57600080fd5b8101908080359060200190929190505050610b2b565b005b6102cd610f53565b604051808277ffffffffffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103336004803603604081101561031357600080fd5b810190808035906020019092919080359060200190929190505050610f7b565b005b61033d611301565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610371611327565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103a561134b565b6040518082815260200191505060405180910390f35b6103e7600480360360208110156103d157600080fd5b8101908080359060200190929190505050611351565b60405180851515815260200184815260200183815260200182815260200194505050505060405180910390f35b61041c611467565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61048a6004803603602081101561045e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061148d565b005b6104946115cb565b6040518082815260200191505060405180910390f35b6104d6600480360360208110156104c057600080fd5b81019080803590602001909291905050506115d1565b6040518082815260200191505060405180910390f35b6105a1600480360360a081101561050257600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561055d57600080fd5b82018360208201111561056f57600080fd5b8035906020019184600183028401116401000000008311171561059157600080fd5b90919293919293905050506115f2565b005b610619600480360360808110156105b957600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612019565b6040518082815260200191505060405180910390f35b6106376127b1565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106a56004803603602081101561067957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127d7565b005b6106d3600480360360208110156106bd57600080fd5b8101908080359060200190929190505050612915565b604051808781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff168152602001828152602001965050505050505060405180910390f35b610738612989565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6107606129a3565b6040518082815260200191505060405180910390f35b6107b86004803603602081101561078c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129a9565b6040518082815260200191505060405180910390f35b6107d66129c1565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61080a6129e7565b6040518082815260200191505060405180910390f35b610828612a0b565b6040518082815260200191505060405180910390f35b61088a6004803603604081101561085457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a11565b005b6108d8600480360360408110156108a257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612dc8565b005b6000600b80549050905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d9638d367f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060a060405180830381600087803b15801561097c57600080fd5b505af1158015610990573d6000803e3d6000fd5b505050506040513d60a08110156109a657600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050945050505050610abe81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d79265387f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610a7e57600080fd5b505af1158015610a92573d6000803e3d6000fd5b505050506040513d6020811015610aa857600080fd5b81019080805190602001909291905050506133cd565b60098190555050565b6060600b805480602002602001604051908101604052809291908181526020018280548015610b1557602002820191906000526020600020905b815481526020019060010190808311610b01575b5050505050905090565b60065481565b60055481565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610bdf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b6000600d5414610c57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f73797374656d2d6c6f636b6564000000000000000000000081525060200191505060405180910390fd5b6001600d81905550600073ffffffffffffffffffffffffffffffffffffffff16600c600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f436c69707065722f6e6f742d72756e6e696e672d61756374696f6e000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87193f47f0000000000000000000000000000000000000000000000000000000000000000600c6000858152602001908152602001600020600101546040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015610deb57600080fd5b505af1158015610dff573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636111be2e7f00000000000000000000000000000000000000000000000000000000000000003033600c6000878152602001908152602001600020600201546040518563ffffffff1660e01b8152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050600060405180830381600087803b158015610ef057600080fd5b505af1158015610f04573d6000803e3d6000fd5b50505050610f11816133f2565b7f2c5d2826eb5903b8fc201cf48094b858f42f61c7eaac9aaf43ebed490138144e816040518082815260200191505060405180910390a16000600d8190555050565b60088054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1681565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461102f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b6000600d54146110a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f73797374656d2d6c6f636b6564000000000000000000000081525060200191505060405180910390fd5b6001600d819055507f62756600000000000000000000000000000000000000000000000000000000008214156110e357806005819055506112bd565b7f7461696c0000000000000000000000000000000000000000000000000000000082141561111757806006819055506112bc565b7f637573700000000000000000000000000000000000000000000000000000000082141561114b57806007819055506112bb565b7f63686970000000000000000000000000000000000000000000000000000000008214156111a15780600860006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506112ba565b7f746970000000000000000000000000000000000000000000000000000000000082141561121657806008806101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055506112b9565b7f73746f707065640000000000000000000000000000000000000000000000000082141561124a5780600e819055506112b8565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f436c69707065722f66696c652d756e7265636f676e697a65642d706172616d0081525060200191505060405180910390fd5b5b5b5b5b5b817fe986e40cc8c151830d4f61050f4fb2e4add8567caad2d5f5496f9158e91fe4c7826040518082815260200191505060405180910390a26000600d819055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60075481565b6000806000806000600c600087815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600c600088815260200190815260200160002060030160149054906101000a90046bffffffffffffffffffffffff16905060006113e782600c60008b815260200190815260200160002060040154613512565b8097508192505050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156114295750805b9650600c6000898152602001908152602001600020600201549450600c60008981526020019081526020016000206001015493505050509193509193565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611541576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6060405160405180910390a250565b600e5481565b600b81815481106115de57fe5b906000526020600020016000915090505481565b6000600d541461166a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f73797374656d2d6c6f636b6564000000000000000000000081525060200191505060405180910390fd5b6001600d81905550600380600e54106116eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f436c69707065722f73746f707065642d696e636f72726563740000000000000081525060200191505060405180910390fd5b6000600c600089815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600c60008a815260200190815260200160002060030160149054906101000a90046bffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f436c69707065722f6e6f742d72756e6e696e672d61756374696f6e000000000081525060200191505060405180910390fd5b60008061181f83600c60008e815260200190815260200160002060040154613512565b8093508192505050801561189b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f436c69707065722f6e656564732d72657365740000000000000000000000000081525060200191505060405180910390fd5b5080881015611912576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f746f6f2d657870656e73697665000000000000000000000081525060200191505060405180910390fd5b6000600c60008c81526020019081526020016000206002015490506000600c60008d8152602001908152602001600020600101549050600080611955848e61361e565b90506119618186613638565b91508282111561197f5782915084828161197757fe5b049050611a2d565b828210801561198d57508381105b15611a2c5760006009549050808385031015611a2a57808411611a18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f436c69707065722f6e6f2d7061727469616c2d7075726368617365000000000081525060200191505060405180910390fd5b8084039250858381611a2657fe5b0491505b505b5b818303925080840393507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636111be2e7f0000000000000000000000000000000000000000000000000000000000000000308e856040518563ffffffff1660e01b8152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050600060405180830381600087803b158015611b0e57600080fd5b505af1158015611b22573d6000803e3d6000fd5b505050506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008b8b9050118015611bac57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614155b8015611be457508073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614155b15611caf578b73ffffffffffffffffffffffffffffffffffffffff16638452c10e3385858f8f6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015611c9657600080fd5b505af1158015611caa573d6000803e3d6000fd5b505050505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb35783b33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015611d8057600080fd5b505af1158015611d94573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663c87193f47f000000000000000000000000000000000000000000000000000000000000000060008814611de35785611de7565b8587015b6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015611e2457600080fd5b505af1158015611e38573d6000803e3d6000fd5b5050505050506000831415611e5557611e508d6133f2565b611f93565b6000821415611f5b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636111be2e7f00000000000000000000000000000000000000000000000000000000000000003089876040518563ffffffff1660e01b8152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050600060405180830381600087803b158015611f3557600080fd5b505af1158015611f49573d6000803e3d6000fd5b50505050611f568d6133f2565b611f92565b81600c60008f81526020019081526020016000206001018190555082600c60008f8152602001908152602001600020600201819055505b5b8573ffffffffffffffffffffffffffffffffffffffff168d7f05e309fd6ce72f2ab888a20056bb4210df08daed86f21f95053deb19964d86b18d87858789604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a3505050505050506000600d81905550505050505050565b600060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146120cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b6000600d5414612147576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f73797374656d2d6c6f636b6564000000000000000000000081525060200191505060405180910390fd5b6001600d81905550600180600e54106121c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f436c69707065722f73746f707065642d696e636f72726563740000000000000081525060200191505060405180910390fd5b6000861161223e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f436c69707065722f7a65726f2d7461620000000000000000000000000000000081525060200191505060405180910390fd5b600085116122b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f436c69707065722f7a65726f2d6c6f740000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612357576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f436c69707065722f7a65726f2d7573720000000000000000000000000000000081525060200191505060405180910390fd5b600a600081546001019190508190559150600082116123de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f436c69707065722f6f766572666c6f770000000000000000000000000000000081525060200191505060405180910390fd5b600b8290806001815401808255809150506001900390600052602060002001600090919091909150556001600b8054905003600c60008481526020019081526020016000206000018190555085600c60008481526020019081526020016000206001018190555084600c60008481526020019081526020016000206002018190555083600c600084815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600c600084815260200190815260200160002060030160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550600061250f612507613664565b60055461390f565b905060008111612587576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f7a65726f2d746f702d70726963650000000000000000000081525060200191505060405180910390fd5b80600c600085815260200190815260200160002060040181905550600060088054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1690506000600860009054906101000a900467ffffffffffffffff1667ffffffffffffffff16905060008083118061261a5750600082115b1561271e576126328361262d8c856133cd565b613938565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f24e23eb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561270557600080fd5b505af1158015612719573d6000803e3d6000fd5b505050505b8673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16877f7c5bfdc0a5e8192f6cd4972f382cec69116862fb62e6abff8003874c58e064b8878e8e876040518085815260200184815260200183815260200182815260200194505050505060405180910390a450505050506000600d81905550949350505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461288b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167f184450df2e323acec0ed3b5c7531b81f9b4cdef7914dfd4c0a4317416bb5251b60405160405180910390a250565b600c6020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160149054906101000a90046bffffffffffffffffffffffff16908060040154905086565b600860009054906101000a900467ffffffffffffffff1681565b60095481565b60006020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a5481565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414612ac5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b6000600d5414612b3d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f73797374656d2d6c6f636b6564000000000000000000000081525060200191505060405180910390fd5b6001600d819055507f73706f7474657200000000000000000000000000000000000000000000000000821415612bb35780600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612d6e565b7f646f670000000000000000000000000000000000000000000000000000000000821415612c215780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612d6d565b7f766f770000000000000000000000000000000000000000000000000000000000821415612c8f5780600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612d6c565b7f63616c6300000000000000000000000000000000000000000000000000000000821415612cfd5780600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612d6b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f436c69707065722f66696c652d756e7265636f676e697a65642d706172616d0081525060200191505060405180910390fd5b5b5b5b817f8fef588b5fc1afbf5b2f06c1a435d513f208da2e6704c3d8f0e0ec91167066ba82604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a26000600d819055505050565b6000600d5414612e40576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f73797374656d2d6c6f636b6564000000000000000000000081525060200191505060405180910390fd5b6001600d81905550600280600e5410612ec1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f436c69707065722f73746f707065642d696e636f72726563740000000000000081525060200191505060405180910390fd5b6000600c600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600c600086815260200190815260200160002060030160149054906101000a90046bffffffffffffffffffffffff1690506000600c6000878152602001908152602001600020600401549050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612fed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f436c69707065722f6e6f742d72756e6e696e672d61756374696f6e000000000081525060200191505060405180910390fd5b6000612ff98383613512565b5090508061306f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436c69707065722f63616e6e6f742d726573657400000000000000000000000081525060200191505060405180910390fd5b6000600c60008981526020019081526020016000206001015490506000600c60008a815260200190815260200160002060020154905042600c60008b815260200190815260200160002060030160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060006130f4613664565b90506131028160055461390f565b94506000851161317a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f436c69707065722f7a65726f2d746f702d70726963650000000000000000000081525060200191505060405180910390fd5b84600c60008c815260200190815260200160002060040181905550600060088054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1690506000600860009054906101000a900467ffffffffffffffff1667ffffffffffffffff16905060008083118061320d5750600082115b15613338576000600954905080871015801561323257508061322f8787613638565b10155b156133365761324a8461324589866133cd565b613938565b91507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f24e23eb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168f856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561331d57600080fd5b505af1158015613331573d6000803e3d6000fd5b505050505b505b8b73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168e7f275de7ecdd375b5e8049319f8b350686131c219dd4dc450a08e9cf83b03c865f8b8a8a876040518085815260200184815260200183815260200182815260200194505050505060405180910390a450505050505050505050506000600d819055505050565b6000670de0b6b3a76400006133e28484613638565b816133e957fe5b04905092915050565b6000600b6001600b80549050038154811061340957fe5b90600052602060002001549050808214613471576000600c600084815260200190815260200160002060000154905081600b828154811061344657fe5b906000526020600020018190555080600c600084815260200190815260200160002060000181905550505b600b80548061347c57fe5b60019003818190600052602060002001600090559055600c6000838152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a8154906bffffffffffffffffffffffff0219169055600482016000905550505050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663487a23958461356c42886bffffffffffffffffffffffff16613952565b6040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b1580156135a757600080fd5b505afa1580156135bb573d6000803e3d6000fd5b505050506040513d60208110156135d157600080fd5b810190808051906020019092919050505090506006546135ff42866bffffffffffffffffffffffff16613952565b11806136155750600754613613828561396c565b105b91509250929050565b60008183111561362e5781613630565b825b905092915050565b600080821480613655575082828385029250828161365257fe5b04145b61365e57600080fd5b92915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d9638d367f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401808281526020019150506040805180830381600087803b1580156136fb57600080fd5b505af115801561370f573d6000803e3d6000fd5b505050506040513d604081101561372557600080fd5b8101908080519060200190929190805190602001909291905050505090506000808273ffffffffffffffffffffffffffffffffffffffff166359e02dd76040518163ffffffff1660e01b81526004016040805180830381600087803b15801561378d57600080fd5b505af11580156137a1573d6000803e3d6000fd5b505050506040513d60408110156137b757600080fd5b8101908080519060200190929190805190602001909291905050509150915080613849576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436c69707065722f696e76616c69642d7072696365000000000000000000000081525060200191505060405180910390fd5b61390761385d8360001c633b9aca00613638565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663495d32cb6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156138c757600080fd5b505af11580156138db573d6000803e3d6000fd5b505050506040513d60208110156138f157600080fd5b810190808051906020019092919050505061396c565b935050505090565b60006b033b2e3c9fd0803ce80000006139288484613638565b8161392f57fe5b04905092915050565b600082828401915081101561394c57600080fd5b92915050565b600082828403915081111561396657600080fd5b92915050565b600081613985846b033b2e3c9fd0803ce8000000613638565b8161398c57fe5b0490509291505056fea2646970667358221220e761f407bbe717a98b0a62a8d64c5ba7dffe09b7dcbec69f277c88b0bbdc3fd664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1413,
        "contract": "contracts/clip.sol:Clipper",
        "label": "wards",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1469,
        "contract": "contracts/clip.sol:Clipper",
        "label": "dog",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(DogLike)1387"
      },
      {
        "astId": 1471,
        "contract": "contracts/clip.sol:Clipper",
        "label": "vow",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1473,
        "contract": "contracts/clip.sol:Clipper",
        "label": "spotter",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(SpotterLike)1372"
      },
      {
        "astId": 1475,
        "contract": "contracts/clip.sol:Clipper",
        "label": "calc",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(AbacusLike)1409"
      },
      {
        "astId": 1477,
        "contract": "contracts/clip.sol:Clipper",
        "label": "buf",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1479,
        "contract": "contracts/clip.sol:Clipper",
        "label": "tail",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1481,
        "contract": "contracts/clip.sol:Clipper",
        "label": "cusp",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1483,
        "contract": "contracts/clip.sol:Clipper",
        "label": "chip",
        "offset": 0,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 1485,
        "contract": "contracts/clip.sol:Clipper",
        "label": "tip",
        "offset": 8,
        "slot": "8",
        "type": "t_uint192"
      },
      {
        "astId": 1487,
        "contract": "contracts/clip.sol:Clipper",
        "label": "chost",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1489,
        "contract": "contracts/clip.sol:Clipper",
        "label": "kicks",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1492,
        "contract": "contracts/clip.sol:Clipper",
        "label": "active",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1509,
        "contract": "contracts/clip.sol:Clipper",
        "label": "sales",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Sale)1505_storage)"
      },
      {
        "astId": 1511,
        "contract": "contracts/clip.sol:Clipper",
        "label": "locked",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1514,
        "contract": "contracts/clip.sol:Clipper",
        "label": "stopped",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(AbacusLike)1409": {
        "encoding": "inplace",
        "label": "contract AbacusLike",
        "numberOfBytes": "20"
      },
      "t_contract(DogLike)1387": {
        "encoding": "inplace",
        "label": "contract DogLike",
        "numberOfBytes": "20"
      },
      "t_contract(SpotterLike)1372": {
        "encoding": "inplace",
        "label": "contract SpotterLike",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Sale)1505_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Clipper.Sale)",
        "numberOfBytes": "32",
        "value": "t_struct(Sale)1505_storage"
      },
      "t_struct(Sale)1505_storage": {
        "encoding": "inplace",
        "label": "struct Clipper.Sale",
        "members": [
          {
            "astId": 1494,
            "contract": "contracts/clip.sol:Clipper",
            "label": "pos",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1496,
            "contract": "contracts/clip.sol:Clipper",
            "label": "tab",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1498,
            "contract": "contracts/clip.sol:Clipper",
            "label": "lot",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1500,
            "contract": "contracts/clip.sol:Clipper",
            "label": "usr",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1502,
            "contract": "contracts/clip.sol:Clipper",
            "label": "tic",
            "offset": 20,
            "slot": "3",
            "type": "t_uint96"
          },
          {
            "astId": 1504,
            "contract": "contracts/clip.sol:Clipper",
            "label": "top",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
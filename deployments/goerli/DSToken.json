{
  "address": "0xdafE49Dbe2C36A72B30EdA50243651025074a385",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "guy",
          "type": "address"
        },
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "src",
          "type": "address"
        },
        {
          "name": "dst",
          "type": "address"
        },
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "guy",
          "type": "address"
        },
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "name_",
          "type": "bytes32"
        }
      ],
      "name": "setName",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "src",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stopped",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "authority_",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "guy",
          "type": "address"
        },
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "dst",
          "type": "address"
        },
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "dst",
          "type": "address"
        },
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "push",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "src",
          "type": "address"
        },
        {
          "name": "dst",
          "type": "address"
        },
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "move",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "start",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "guy",
          "type": "address"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "src",
          "type": "address"
        },
        {
          "name": "guy",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "src",
          "type": "address"
        },
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "pull",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "symbol_",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "guy",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "guy",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "LogSetAuthority",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LogSetOwner",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "name": "guy",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "foo",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "bar",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "wad",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "fax",
          "type": "bytes"
        }
      ],
      "name": "LogNote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    }
  ],
  "transactionHash": "0xf604a77a97f0368fcfe62af9312ff3935f0782c004c7ea8e90bc94380fb02794",
  "receipt": {
    "to": null,
    "from": "0x76677d82Cba9d7F2BB40670456AbaD808778635c",
    "contractAddress": "0xdafE49Dbe2C36A72B30EdA50243651025074a385",
    "transactionIndex": 51,
    "gasUsed": "1532686",
    "logsBloom": "0x00000000000000010000000000000000000000000100020000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000080000000000000000000000400000000000000000000000040000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000",
    "blockHash": "0x362023f4cb0662f4476620d022b5a900da9ad95e45c0cbaafb349f36a94bd375",
    "transactionHash": "0xf604a77a97f0368fcfe62af9312ff3935f0782c004c7ea8e90bc94380fb02794",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 8618622,
        "transactionHash": "0xf604a77a97f0368fcfe62af9312ff3935f0782c004c7ea8e90bc94380fb02794",
        "address": "0xdafE49Dbe2C36A72B30EdA50243651025074a385",
        "topics": [
          "0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94",
          "0x00000000000000000000000076677d82cba9d7f2bb40670456abad808778635c"
        ],
        "data": "0x",
        "logIndex": 94,
        "blockHash": "0x362023f4cb0662f4476620d022b5a900da9ad95e45c0cbaafb349f36a94bd375"
      }
    ],
    "blockNumber": 8618622,
    "cumulativeGasUsed": "9253686",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4d4b520000000000000000000000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "b67e9782981c625618913247167bc512",
  "metadata": "{\"compiler\":{\"version\":\"0.4.17+commit.bdeb9e52\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name_\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"symbol_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/external contracts/gem.sol\":\"DSToken\"},\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/external contracts/gem.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at Etherscan.io on 2017-11-25\\r\\n */\\r\\n\\r\\n// MKR Token\\r\\n\\r\\n// hevm: flattened sources of src/mkr-499.sol\\r\\npragma solidity ^0.4.17;\\r\\n\\r\\n////// lib/ds-roles/lib/ds-auth/src/auth.sol\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\ncontract DSAuthority {\\r\\n    function canCall(\\r\\n        address src,\\r\\n        address dst,\\r\\n        bytes4 sig\\r\\n    ) public view returns (bool);\\r\\n}\\r\\n\\r\\ncontract DSAuthEvents {\\r\\n    event LogSetAuthority(address indexed authority);\\r\\n    event LogSetOwner(address indexed owner);\\r\\n}\\r\\n\\r\\ncontract DSAuth is DSAuthEvents {\\r\\n    DSAuthority public authority;\\r\\n    address public owner;\\r\\n\\r\\n    function DSAuth() public {\\r\\n        owner = msg.sender;\\r\\n        LogSetOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    function setOwner(address owner_) public auth {\\r\\n        owner = owner_;\\r\\n        LogSetOwner(owner);\\r\\n    }\\r\\n\\r\\n    function setAuthority(DSAuthority authority_) public auth {\\r\\n        authority = authority_;\\r\\n        LogSetAuthority(authority);\\r\\n    }\\r\\n\\r\\n    modifier auth() {\\r\\n        require(isAuthorized(msg.sender, msg.sig));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isAuthorized(\\r\\n        address src,\\r\\n        bytes4 sig\\r\\n    ) internal view returns (bool) {\\r\\n        if (src == address(this)) {\\r\\n            return true;\\r\\n        } else if (src == owner) {\\r\\n            return true;\\r\\n        } else if (authority == DSAuthority(0)) {\\r\\n            return false;\\r\\n        } else {\\r\\n            return authority.canCall(src, this, sig);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/ds-thing/lib/ds-math/src/math.sol\\r\\n/// math.sol -- mixin for inline numerical wizardry\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\ncontract DSMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x);\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x);\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x);\\r\\n    }\\r\\n\\r\\n    function min(uint x, uint y) internal pure returns (uint z) {\\r\\n        return x <= y ? x : y;\\r\\n    }\\r\\n\\r\\n    function max(uint x, uint y) internal pure returns (uint z) {\\r\\n        return x >= y ? x : y;\\r\\n    }\\r\\n\\r\\n    function imin(int x, int y) internal pure returns (int z) {\\r\\n        return x <= y ? x : y;\\r\\n    }\\r\\n\\r\\n    function imax(int x, int y) internal pure returns (int z) {\\r\\n        return x >= y ? x : y;\\r\\n    }\\r\\n\\r\\n    uint constant WAD = 10 ** 18;\\r\\n    uint constant RAY = 10 ** 27;\\r\\n\\r\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = add(mul(x, y), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = add(mul(x, y), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = add(mul(x, WAD), y / 2) / y;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = add(mul(x, RAY), y / 2) / y;\\r\\n    }\\r\\n\\r\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\r\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\r\\n    //\\r\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\r\\n    //\\r\\n    // These facts are why it works:\\r\\n    //\\r\\n    //  If n is even, then x^n = (x^2)^(n/2).\\r\\n    //  If n is odd,  then x^n = x * x^(n-1),\\r\\n    //   and applying the equation for even x gives\\r\\n    //    x^n = x * (x^2)^((n-1) / 2).\\r\\n    //\\r\\n    //  Also, EVM division is flooring and\\r\\n    //    floor[(n-1) / 2] = floor[n / 2].\\r\\n    //\\r\\n    function rpow(uint x, uint n) internal pure returns (uint z) {\\r\\n        z = n % 2 != 0 ? x : RAY;\\r\\n\\r\\n        for (n /= 2; n != 0; n /= 2) {\\r\\n            x = rmul(x, x);\\r\\n\\r\\n            if (n % 2 != 0) {\\r\\n                z = rmul(z, x);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/ds-thing/lib/ds-note/src/note.sol\\r\\n/// note.sol -- the `note' modifier, for logging calls as events\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\ncontract DSNote {\\r\\n    event LogNote(\\r\\n        bytes4 indexed sig,\\r\\n        address indexed guy,\\r\\n        bytes32 indexed foo,\\r\\n        bytes32 indexed bar,\\r\\n        uint wad,\\r\\n        bytes fax\\r\\n    ) anonymous;\\r\\n\\r\\n    modifier note() {\\r\\n        bytes32 foo;\\r\\n        bytes32 bar;\\r\\n\\r\\n        assembly {\\r\\n            foo := calldataload(4)\\r\\n            bar := calldataload(36)\\r\\n        }\\r\\n\\r\\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\\r\\n\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/ds-thing/src/thing.sol\\r\\n// thing.sol - `auth` with handy mixins. your things should be DSThings\\r\\n\\r\\n// Copyright (C) 2017  DappHub, LLC\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\n/* import 'ds-auth/auth.sol'; */\\r\\n/* import 'ds-note/note.sol'; */\\r\\n/* import 'ds-math/math.sol'; */\\r\\n\\r\\ncontract DSThing is DSAuth, DSNote, DSMath {\\r\\n\\r\\n}\\r\\n\\r\\n////// lib/ds-token/lib/ds-stop/src/stop.sol\\r\\n/// stop.sol -- mixin for enable/disable functionality\\r\\n\\r\\n// Copyright (C) 2017  DappHub, LLC\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\n/* import \\\"ds-auth/auth.sol\\\"; */\\r\\n/* import \\\"ds-note/note.sol\\\"; */\\r\\n\\r\\ncontract DSStop is DSNote, DSAuth {\\r\\n    bool public stopped;\\r\\n\\r\\n    modifier stoppable() {\\r\\n        require(!stopped);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function stop() public auth note {\\r\\n        stopped = true;\\r\\n    }\\r\\n\\r\\n    function start() public auth note {\\r\\n        stopped = false;\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/ds-token/lib/erc20/src/erc20.sol\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.8; */\\r\\n\\r\\n// Token standard API\\r\\n// https://github.com/ethereum/EIPs/issues/20\\r\\n\\r\\ncontract ERC20 {\\r\\n    function totalSupply() public view returns (uint supply);\\r\\n\\r\\n    function balanceOf(address who) public view returns (uint value);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view returns (uint _allowance);\\r\\n\\r\\n    function transfer(address to, uint value) public returns (bool ok);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint value\\r\\n    ) public returns (bool ok);\\r\\n\\r\\n    function approve(address spender, uint value) public returns (bool ok);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\n////// lib/ds-token/src/base.sol\\r\\n/// base.sol -- basic ERC20 implementation\\r\\n\\r\\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\n/* import \\\"erc20/erc20.sol\\\"; */\\r\\n/* import \\\"ds-math/math.sol\\\"; */\\r\\n\\r\\ncontract DSTokenBase is ERC20, DSMath {\\r\\n    uint256 _supply;\\r\\n    mapping(address => uint256) _balances;\\r\\n    mapping(address => mapping(address => uint256)) _approvals;\\r\\n\\r\\n    function DSTokenBase(uint supply) public {\\r\\n        _balances[msg.sender] = supply;\\r\\n        _supply = supply;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint) {\\r\\n        return _supply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address src) public view returns (uint) {\\r\\n        return _balances[src];\\r\\n    }\\r\\n\\r\\n    function allowance(address src, address guy) public view returns (uint) {\\r\\n        return _approvals[src][guy];\\r\\n    }\\r\\n\\r\\n    function transfer(address dst, uint wad) public returns (bool) {\\r\\n        return transferFrom(msg.sender, dst, wad);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint wad\\r\\n    ) public returns (bool) {\\r\\n        if (src != msg.sender) {\\r\\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\\r\\n        }\\r\\n\\r\\n        _balances[src] = sub(_balances[src], wad);\\r\\n        _balances[dst] = add(_balances[dst], wad);\\r\\n\\r\\n        Transfer(src, dst, wad);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address guy, uint wad) public returns (bool) {\\r\\n        _approvals[msg.sender][guy] = wad;\\r\\n\\r\\n        Approval(msg.sender, guy, wad);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/ds-token/src/token.sol\\r\\n/// token.sol -- ERC20 implementation with minting and burning\\r\\n\\r\\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n/* pragma solidity ^0.4.13; */\\r\\n\\r\\n/* import \\\"ds-stop/stop.sol\\\"; */\\r\\n\\r\\n/* import \\\"./base.sol\\\"; */\\r\\n\\r\\ncontract DSToken is DSTokenBase(0), DSStop {\\r\\n    bytes32 public symbol;\\r\\n    uint256 public decimals = 18; // standard token precision. override to customize\\r\\n\\r\\n    function DSToken(bytes32 symbol_) public {\\r\\n        symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    event Mint(address indexed guy, uint wad);\\r\\n    event Burn(address indexed guy, uint wad);\\r\\n\\r\\n    function approve(address guy) public stoppable returns (bool) {\\r\\n        return super.approve(guy, uint(-1));\\r\\n    }\\r\\n\\r\\n    function approve(address guy, uint wad) public stoppable returns (bool) {\\r\\n        return super.approve(guy, wad);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint wad\\r\\n    ) public stoppable returns (bool) {\\r\\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\\r\\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\\r\\n        }\\r\\n\\r\\n        _balances[src] = sub(_balances[src], wad);\\r\\n        _balances[dst] = add(_balances[dst], wad);\\r\\n\\r\\n        Transfer(src, dst, wad);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function push(address dst, uint wad) public {\\r\\n        transferFrom(msg.sender, dst, wad);\\r\\n    }\\r\\n\\r\\n    function pull(address src, uint wad) public {\\r\\n        transferFrom(src, msg.sender, wad);\\r\\n    }\\r\\n\\r\\n    function move(address src, address dst, uint wad) public {\\r\\n        transferFrom(src, dst, wad);\\r\\n    }\\r\\n\\r\\n    function mint(uint wad) public {\\r\\n        mint(msg.sender, wad);\\r\\n    }\\r\\n\\r\\n    function burn(uint wad) public {\\r\\n        burn(msg.sender, wad);\\r\\n    }\\r\\n\\r\\n    function mint(address guy, uint wad) public auth stoppable {\\r\\n        _balances[guy] = add(_balances[guy], wad);\\r\\n        _supply = add(_supply, wad);\\r\\n        Mint(guy, wad);\\r\\n    }\\r\\n\\r\\n    function burn(address guy, uint wad) public auth stoppable {\\r\\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\\r\\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\\r\\n        }\\r\\n\\r\\n        _balances[guy] = sub(_balances[guy], wad);\\r\\n        _supply = sub(_supply, wad);\\r\\n        Burn(guy, wad);\\r\\n    }\\r\\n\\r\\n    // Optional token name\\r\\n    bytes32 public name = \\\"\\\";\\r\\n\\r\\n    function setName(bytes32 name_) public auth {\\r\\n        name = name_;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6350ac77e45630327af443e4b2951f29cc6c6661c547d790a1537f98bd19e621\"}},\"version\":1}",
  "bytecode": "0x606060405260126006556000600790600019169055341561001f57600080fd5b604051602080611a9183398101604052808051906020019091905050600080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806000819055505033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2806005816000191690555050611969806101286000396000f30060606040523615610147576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461014c57806307da68f51461017d578063095ea7b31461019257806313af4035146101ec57806318160ddd1461022557806323b872dd1461024e578063313ce567146102c757806340c10f19146102f057806342966c68146103325780635ac801fe1461035557806370a082311461037c57806375f12b21146103c95780637a9e5e4b146103f65780638da5cb5b1461042f57806395d89b41146104845780639dc29fac146104b5578063a0712d68146104f7578063a9059cbb1461051a578063b753a98c14610574578063bb35783b146105b6578063be9a655514610617578063bf7e214f1461062c578063daea85c514610681578063dd62ed3e146106d2578063f2d5d56b1461073e575b600080fd5b341561015757600080fd5b61015f610780565b60405180826000191660001916815260200191505060405180910390f35b341561018857600080fd5b610190610786565b005b341561019d57600080fd5b6101d2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610889565b604051808215151515815260200191505060405180910390f35b34156101f757600080fd5b610223600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108b9565b005b341561023057600080fd5b61023861099b565b6040518082815260200191505060405180910390f35b341561025957600080fd5b6102ad600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109a4565b604051808215151515815260200191505060405180910390f35b34156102d257600080fd5b6102da610d2e565b6040518082815260200191505060405180910390f35b34156102fb57600080fd5b610330600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d34565b005b341561033d57600080fd5b6103536004808035906020019091905050610e79565b005b341561036057600080fd5b61037a600480803560001916906020019091905050610e86565b005b341561038757600080fd5b6103b3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ecd565b6040518082815260200191505060405180910390f35b34156103d457600080fd5b6103dc610f16565b604051808215151515815260200191505060405180910390f35b341561040157600080fd5b61042d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f29565b005b341561043a57600080fd5b61044261100b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561048f57600080fd5b610497611031565b60405180826000191660001916815260200191505060405180910390f35b34156104c057600080fd5b6104f5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611037565b005b341561050257600080fd5b6105186004808035906020019091905050611360565b005b341561052557600080fd5b61055a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061136d565b604051808215151515815260200191505060405180910390f35b341561057f57600080fd5b6105b4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611382565b005b34156105c157600080fd5b610615600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611392565b005b341561062257600080fd5b61062a6113a3565b005b341561063757600080fd5b61063f6114a6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561068c57600080fd5b6106b8600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114cc565b604051808215151515815260200191505060405180910390f35b34156106dd57600080fd5b610728600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061151b565b6040518082815260200191505060405180910390f35b341561074957600080fd5b61077e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506115a2565b005b60075481565b6107b4336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b15156107bf57600080fd5b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a46001600460146101000a81548160ff0219169083151502179055505050565b6000600460149054906101000a900460ff161515156108a757600080fd5b6108b18383611813565b905092915050565b6108e7336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b15156108f257600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b60008054905090565b6000600460149054906101000a900460ff161515156109c257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610a9a57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610ba657610b25600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611905565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b610bef600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611905565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c7b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611921565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60065481565b610d62336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b1515610d6d57600080fd5b600460149054906101000a900460ff16151515610d8957600080fd5b610dd2600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611921565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e2160005482611921565b6000819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a25050565b610e833382611037565b50565b610eb4336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b1515610ebf57600080fd5b806007816000191690555050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460149054906101000a900460ff1681565b610f57336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b1515610f6257600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b611065336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b151561107057600080fd5b600460149054906101000a900460ff1615151561108c57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415801561116457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15611270576111ef600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611905565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6112b9600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611905565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061130860005482611905565b6000819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a25050565b61136a3382610d34565b50565b600061137a3384846109a4565b905092915050565b61138d3383836109a4565b505050565b61139d8383836109a4565b50505050565b6113d1336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b15156113dc57600080fd5b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a46000600460146101000a81548160ff0219169083151502179055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460149054906101000a900460ff161515156114ea57600080fd5b611514827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611813565b9050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6115ad8233836109a4565b505050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115f1576001905061180d565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611650576001905061180d565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156116b0576000905061180d565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019350505050602060405180830381600087803b15156117ef57600080fd5b6102c65a03f1151561180057600080fd5b5050506040518051905090505b92915050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000828284039150811115151561191b57600080fd5b92915050565b6000828284019150811015151561193757600080fd5b929150505600a165627a7a723058207189ce730f607f16623a07e7cc8ac09291141cee00f378cbdb10c24c5e97228c0029",
  "deployedBytecode": "0x60606040523615610147576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461014c57806307da68f51461017d578063095ea7b31461019257806313af4035146101ec57806318160ddd1461022557806323b872dd1461024e578063313ce567146102c757806340c10f19146102f057806342966c68146103325780635ac801fe1461035557806370a082311461037c57806375f12b21146103c95780637a9e5e4b146103f65780638da5cb5b1461042f57806395d89b41146104845780639dc29fac146104b5578063a0712d68146104f7578063a9059cbb1461051a578063b753a98c14610574578063bb35783b146105b6578063be9a655514610617578063bf7e214f1461062c578063daea85c514610681578063dd62ed3e146106d2578063f2d5d56b1461073e575b600080fd5b341561015757600080fd5b61015f610780565b60405180826000191660001916815260200191505060405180910390f35b341561018857600080fd5b610190610786565b005b341561019d57600080fd5b6101d2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610889565b604051808215151515815260200191505060405180910390f35b34156101f757600080fd5b610223600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108b9565b005b341561023057600080fd5b61023861099b565b6040518082815260200191505060405180910390f35b341561025957600080fd5b6102ad600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109a4565b604051808215151515815260200191505060405180910390f35b34156102d257600080fd5b6102da610d2e565b6040518082815260200191505060405180910390f35b34156102fb57600080fd5b610330600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d34565b005b341561033d57600080fd5b6103536004808035906020019091905050610e79565b005b341561036057600080fd5b61037a600480803560001916906020019091905050610e86565b005b341561038757600080fd5b6103b3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ecd565b6040518082815260200191505060405180910390f35b34156103d457600080fd5b6103dc610f16565b604051808215151515815260200191505060405180910390f35b341561040157600080fd5b61042d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f29565b005b341561043a57600080fd5b61044261100b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561048f57600080fd5b610497611031565b60405180826000191660001916815260200191505060405180910390f35b34156104c057600080fd5b6104f5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611037565b005b341561050257600080fd5b6105186004808035906020019091905050611360565b005b341561052557600080fd5b61055a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061136d565b604051808215151515815260200191505060405180910390f35b341561057f57600080fd5b6105b4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611382565b005b34156105c157600080fd5b610615600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611392565b005b341561062257600080fd5b61062a6113a3565b005b341561063757600080fd5b61063f6114a6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561068c57600080fd5b6106b8600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114cc565b604051808215151515815260200191505060405180910390f35b34156106dd57600080fd5b610728600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061151b565b6040518082815260200191505060405180910390f35b341561074957600080fd5b61077e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506115a2565b005b60075481565b6107b4336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b15156107bf57600080fd5b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a46001600460146101000a81548160ff0219169083151502179055505050565b6000600460149054906101000a900460ff161515156108a757600080fd5b6108b18383611813565b905092915050565b6108e7336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b15156108f257600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b60008054905090565b6000600460149054906101000a900460ff161515156109c257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610a9a57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610ba657610b25600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611905565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b610bef600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611905565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c7b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611921565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60065481565b610d62336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b1515610d6d57600080fd5b600460149054906101000a900460ff16151515610d8957600080fd5b610dd2600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611921565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e2160005482611921565b6000819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a25050565b610e833382611037565b50565b610eb4336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b1515610ebf57600080fd5b806007816000191690555050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460149054906101000a900460ff1681565b610f57336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b1515610f6257600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b611065336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b151561107057600080fd5b600460149054906101000a900460ff1615151561108c57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415801561116457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15611270576111ef600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611905565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6112b9600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611905565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061130860005482611905565b6000819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a25050565b61136a3382610d34565b50565b600061137a3384846109a4565b905092915050565b61138d3383836109a4565b505050565b61139d8383836109a4565b50505050565b6113d1336000357fffffffff00000000000000000000000000000000000000000000000000000000166115b2565b15156113dc57600080fd5b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a46000600460146101000a81548160ff0219169083151502179055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460149054906101000a900460ff161515156114ea57600080fd5b611514827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611813565b9050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6115ad8233836109a4565b505050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115f1576001905061180d565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611650576001905061180d565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156116b0576000905061180d565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019350505050602060405180830381600087803b15156117ef57600080fd5b6102c65a03f1151561180057600080fd5b5050506040518051905090505b92915050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000828284039150811115151561191b57600080fd5b92915050565b6000828284019150811015151561193757600080fd5b929150505600a165627a7a723058207189ce730f607f16623a07e7cc8ac09291141cee00f378cbdb10c24c5e97228c0029",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}